import SwiftUI

#if canImport(Axiom)
import Axiom

// MARK: - @View Macro Test View

/// Demonstrates the revolutionary @View macro that generates:
/// - @ObservedObject context property  
/// - Type-safe initializer
/// - Lifecycle integration (onAppear/onDisappear)
/// - Error handling state
/// - Intelligence query methods
@View(RealCounterContext)
struct ViewMacroTestView: View {
    // NOTE: The @View macro automatically generates:
    // @ObservedObject var context: RealCounterContext
    // public init(context: RealCounterContext)
    // private func axiomOnAppear() async
    // private func axiomOnDisappear() async
    // @State private var showingError = false
    // private func queryIntelligence(_ query: String) async -> String?
    
    var body: some View {
        VStack(spacing: 20) {
            
            // MARK: - Header
            VStack(spacing: 8) {
                Text("@View Macro Demo")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                Text("90%+ Boilerplate Reduction Achieved!")
                    .font(.caption)
                    .foregroundColor(.green)
                    .fontWeight(.semibold)
            }
            
            // MARK: - Generated Context Integration
            VStack(alignment: .leading, spacing: 12) {
                Text("Generated by @View Macro:")
                    .font(.headline)
                
                VStack(alignment: .leading, spacing: 4) {
                    Label("@ObservedObject context: RealCounterContext", systemImage: "link")
                    Label("Automatic type-safe initializer", systemImage: "gear")
                    Label("Lifecycle methods (onAppear/onDisappear)", systemImage: "arrow.clockwise")
                    Label("Error handling state", systemImage: "exclamationmark.triangle")
                    Label("Intelligence query integration", systemImage: "brain.head.profile")
                }
                .font(.caption)
                .foregroundColor(.secondary)
            }
            .padding()
            .background(Color.blue.opacity(0.1))
            .cornerRadius(12)
            
            // MARK: - Counter Display
            VStack(spacing: 12) {
                Text("Counter Value")
                    .font(.headline)
                
                Text("\(context.currentCount)")
                    .font(.system(size: 48, weight: .bold, design: .rounded))
                    .foregroundColor(.primary)
                
                // Counter Controls
                HStack(spacing: 20) {
                    Button(action: {
                        Task {
                            await context.decrementCounter()
                        }
                    }) {
                        Image(systemName: "minus.circle.fill")
                            .font(.title)
                            .foregroundColor(.red)
                    }
                    
                    Button(action: {
                        Task {
                            await context.incrementCounter()
                        }
                    }) {
                        Image(systemName: "plus.circle.fill")
                            .font(.title)
                            .foregroundColor(.green)
                    }
                    
                    Button(action: {
                        Task {
                            await context.resetCounter()
                        }
                    }) {
                        Image(systemName: "arrow.counterclockwise.circle.fill")
                            .font(.title)
                            .foregroundColor(.blue)
                    }
                }
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(12)
            
            // MARK: - Intelligence Integration
            VStack(spacing: 12) {
                Text("Intelligence Query")
                    .font(.headline)
                
                Button(action: {
                    Task {
                        // Using the generated queryIntelligence method!
                        if let response = await queryIntelligence("Analyze the current counter value \(context.currentCount)") {
                            print("ðŸ§  Intelligence Response: \(response)")
                        }
                        
                        // Also trigger the context intelligence
                        await context.askIntelligence()
                    }
                }) {
                    HStack {
                        Image(systemName: "brain.head.profile")
                        Text("Ask Intelligence")
                    }
                    .foregroundColor(.white)
                    .padding()
                    .background(Color.purple)
                    .cornerRadius(8)
                }
                
                if !context.lastIntelligenceResponse.isEmpty {
                    Text(context.lastIntelligenceResponse)
                        .font(.caption)
                        .padding()
                        .background(Color.purple.opacity(0.1))
                        .cornerRadius(8)
                }
            }
            .padding()
            .background(Color.purple.opacity(0.1))
            .cornerRadius(12)
            
            // MARK: - Error Display
            if let error = context.lastError {
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Image(systemName: "exclamationmark.triangle.fill")
                            .foregroundColor(.orange)
                        Text("Error Handled")
                            .font(.headline)
                    }
                    
                    Text(error.userMessage)
                        .font(.caption)
                }
                .padding()
                .background(Color.orange.opacity(0.1))
                .cornerRadius(8)
            }
            
            Spacer()
        }
        .padding()
        .navigationTitle("@View Macro")
        .navigationBarTitleDisplayMode(.inline)
        .task {
            // Using the generated lifecycle methods!
            await axiomOnAppear()
        }
        .onDisappear {
            Task {
                // Using the generated lifecycle methods!
                await axiomOnDisappear()
            }
        }
        .alert("Error", isPresented: $showingError) {
            Button("OK") { }
        } message: {
            if let error = context.lastError {
                Text(error.userMessage)
            }
        }
    }
}

// MARK: - Preview
#Preview {
    NavigationView {
        // The @View macro generates a type-safe initializer!
        ViewMacroTestView(context: RealCounterContext(
            counterClient: RealCounterClient(),
            intelligence: MockIntelligence()
        ))
    }
}

// MARK: - Mock Intelligence for Preview
private struct MockIntelligence: AxiomIntelligence {
    func processQuery(_ query: String) async throws -> IntelligenceResponse {
        return IntelligenceResponse(
            answer: "Mock response: The number has philosophical significance!",
            confidence: 0.95,
            sources: [],
            processingTime: 0.1
        )
    }
    
    func query(_ query: String) async -> String? {
        return "Mock intelligence: \(query)"
    }
}

#else

// MARK: - Fallback View (when Axiom not available)

struct ViewMacroTestView: View {
    var body: some View {
        VStack {
            Text("@View Macro Test")
                .font(.title)
            
            Text("Add Axiom package to see the macro in action!")
                .foregroundColor(.orange)
        }
        .padding()
    }
}

#Preview {
    ViewMacroTestView()
}

#endif