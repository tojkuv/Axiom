using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace AxiomEndpoints.SourceGenerators;

internal static class TypedClientGenerator
{
    public static string GenerateTypedClient(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        // Only generate client if there are concrete endpoints
        var concreteEndpoints = endpoints.Where(e => e.Kind == EndpointKind.Unary && 
                                                    !string.IsNullOrEmpty(e.RequestType) && 
                                                    !string.IsNullOrEmpty(e.ResponseType) &&
                                                    !e.RequestType.Contains("TRequest") &&
                                                    !e.ResponseType.Contains("TResponse")).ToArray();
        
        if (concreteEndpoints.Length == 0)
            return string.Empty;

        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Net.Http;");
        sb.AppendLine("using System.Net.Http.Json;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Client;");
        sb.AppendLine();
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public partial class AxiomClient");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly HttpClient _httpClient;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomClient(HttpClient httpClient)");
        sb.AppendLine("    {");
        sb.AppendLine("        _httpClient = httpClient;");
        sb.AppendLine("    }");

        foreach (var endpoint in concreteEndpoints)
        {
            GenerateClientMethod(sb, endpoint);
        }

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void GenerateClientMethod(StringBuilder sb, EndpointInfo endpoint)
    {
        var methodName = endpoint.TypeName.Replace("Endpoint", "");
        var returnType = $"Task<Result<{endpoint.ResponseType}>>";

        sb.AppendLine();
        sb.AppendLine($"    public async {returnType} {methodName}Async(");
        sb.AppendLine($"        {endpoint.RequestType} request,");
        sb.AppendLine($"        CancellationToken cancellationToken = default)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");

        if (endpoint.HttpMethod == "GET")
        {
            sb.AppendLine($"            var url = BuildUrl<{endpoint.RouteType}>(request);");
            sb.AppendLine($"            var response = await _httpClient.GetAsync(url, cancellationToken);");
        }
        else
        {
            sb.AppendLine($"            var url = Generated.RouteTemplates.GetTemplate<{endpoint.RouteType}>();");
            sb.AppendLine($"            var response = await _httpClient.{endpoint.HttpMethod}AsJsonAsync(url, request, cancellationToken);");
        }

        sb.AppendLine("            response.EnsureSuccessStatusCode();");
        sb.AppendLine($"            var result = await response.Content.ReadFromJsonAsync<{endpoint.ResponseType}>(cancellationToken);");
        sb.AppendLine($"            return Result<{endpoint.ResponseType}>.Success(result!);");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (HttpRequestException ex)");
        sb.AppendLine("        {");
        sb.AppendLine($"            return Result<{endpoint.ResponseType}>.Failure(new Error(\"HTTP_ERROR\", ex.Message));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
    }
}