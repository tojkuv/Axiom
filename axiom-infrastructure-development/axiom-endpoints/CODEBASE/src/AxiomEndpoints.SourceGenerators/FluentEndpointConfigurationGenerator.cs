using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace AxiomEndpoints.SourceGenerators;

internal static class FluentEndpointConfigurationGenerator
{
    public static string GenerateFluentConfiguration(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Microsoft.AspNetCore.Builder;");
        sb.AppendLine("using Microsoft.AspNetCore.Http;");
        sb.AppendLine("using Microsoft.AspNetCore.Authorization;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated.Configuration;");
        sb.AppendLine();

        // Generate fluent endpoint builder interface
        GenerateFluentEndpointBuilderInterface(sb);

        // Generate fluent endpoint builder implementation
        GenerateFluentEndpointBuilderImplementation(sb, endpoints, compilation);

        // Generate endpoint configuration extensions
        GenerateEndpointConfigurationExtensions(sb, compilation);

        // Generate specific endpoint configurators
        GenerateEndpointConfigurators(sb, endpoints, compilation);

        return sb.ToString();
    }

    private static void GenerateFluentEndpointBuilderInterface(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Fluent interface for configuring Axiom endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public interface IAxiomEndpointBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure authentication requirements");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder RequireAuthentication(bool required = true);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure authorization policy");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder RequireAuthorization(string? policy = null);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure required scopes");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder RequireScopes(params string[] scopes);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure required roles");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder RequireRoles(params string[] roles);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure rate limiting");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithRateLimit(int requestsPerMinute);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure response caching");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithCaching(TimeSpan duration);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure request timeout");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithTimeout(TimeSpan timeout);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure CORS settings");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithCors(Action<AxiomCorsConfiguration>? configure = null);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add custom middleware");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithMiddleware<T>() where T : class;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add endpoint metadata");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithMetadata(object metadata);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure OpenAPI documentation");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithOpenApi(Action<AxiomOpenApiConfiguration>? configure = null);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add endpoint tags for grouping");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithTags(params string[] tags);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure endpoint name");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointBuilder WithName(string name);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Build the endpoint configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    AxiomEndpointConfiguration Build();");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateFluentEndpointBuilderImplementation(StringBuilder sb, ImmutableArray<EndpointInfo> endpoints, CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Implementation of fluent endpoint configuration builder");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointBuilder : IAxiomEndpointBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly AxiomEndpointConfiguration _configuration = new();");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder RequireAuthentication(bool required = true)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.RequireAuthentication = required;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder RequireAuthorization(string? policy = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.AuthorizationPolicy = policy;");
        sb.AppendLine("        _configuration.RequireAuthorization = true;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder RequireScopes(params string[] scopes)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.RequiredScopes = scopes;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder RequireRoles(params string[] roles)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.RequiredRoles = roles;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithRateLimit(int requestsPerMinute)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.RateLimitPerMinute = requestsPerMinute;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithCaching(TimeSpan duration)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.CacheDuration = duration;");
        sb.AppendLine("        _configuration.EnableCaching = true;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithTimeout(TimeSpan timeout)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.RequestTimeout = timeout;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithCors(Action<AxiomCorsConfiguration>? configure = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        var corsConfig = new AxiomCorsConfiguration();");
        sb.AppendLine("        configure?.Invoke(corsConfig);");
        sb.AppendLine("        _configuration.CorsConfiguration = corsConfig;");
        sb.AppendLine("        _configuration.EnableCors = true;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithMiddleware<T>() where T : class");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.CustomMiddleware.Add(typeof(T));");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithMetadata(object metadata)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.Metadata.Add(metadata);");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithOpenApi(Action<AxiomOpenApiConfiguration>? configure = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        var openApiConfig = new AxiomOpenApiConfiguration();");
        sb.AppendLine("        configure?.Invoke(openApiConfig);");
        sb.AppendLine("        _configuration.OpenApiConfiguration = openApiConfig;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithTags(params string[] tags)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.Tags = tags;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointBuilder WithName(string name)");
        sb.AppendLine("    {");
        sb.AppendLine("        _configuration.Name = name;");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfiguration Build()");
        sb.AppendLine("    {");
        sb.AppendLine("        return _configuration;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate configuration models
        GenerateConfigurationModels(sb);
    }

    private static void GenerateConfigurationModels(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Configuration for an Axiom endpoint");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointConfiguration");
        sb.AppendLine("{");
        sb.AppendLine("    public bool RequireAuthentication { get; set; }");
        sb.AppendLine("    public bool RequireAuthorization { get; set; }");
        sb.AppendLine("    public string? AuthorizationPolicy { get; set; }");
        sb.AppendLine("    public string[]? RequiredScopes { get; set; }");
        sb.AppendLine("    public string[]? RequiredRoles { get; set; }");
        sb.AppendLine("    public int? RateLimitPerMinute { get; set; }");
        sb.AppendLine("    public TimeSpan? CacheDuration { get; set; }");
        sb.AppendLine("    public bool EnableCaching { get; set; }");
        sb.AppendLine("    public TimeSpan? RequestTimeout { get; set; }");
        sb.AppendLine("    public bool EnableCors { get; set; }");
        sb.AppendLine("    public AxiomCorsConfiguration? CorsConfiguration { get; set; }");
        sb.AppendLine("    public List<Type> CustomMiddleware { get; set; } = new();");
        sb.AppendLine("    public List<object> Metadata { get; set; } = new();");
        sb.AppendLine("    public AxiomOpenApiConfiguration? OpenApiConfiguration { get; set; }");
        sb.AppendLine("    public string[]? Tags { get; set; }");
        sb.AppendLine("    public string? Name { get; set; }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// CORS configuration for Axiom endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomCorsConfiguration");
        sb.AppendLine("{");
        sb.AppendLine("    public string[]? AllowedOrigins { get; set; }");
        sb.AppendLine("    public string[]? AllowedMethods { get; set; }");
        sb.AppendLine("    public string[]? AllowedHeaders { get; set; }");
        sb.AppendLine("    public bool AllowCredentials { get; set; }");
        sb.AppendLine("    public TimeSpan? PreflightMaxAge { get; set; }");
        sb.AppendLine("    public string[]? ExposedHeaders { get; set; }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// OpenAPI documentation configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomOpenApiConfiguration");
        sb.AppendLine("{");
        sb.AppendLine("    public string? Summary { get; set; }");
        sb.AppendLine("    public string? Description { get; set; }");
        sb.AppendLine("    public string? OperationId { get; set; }");
        sb.AppendLine("    public Dictionary<int, string> ResponseDescriptions { get; set; } = new();");
        sb.AppendLine("    public Dictionary<string, object> Examples { get; set; } = new();");
        sb.AppendLine("    public bool IncludeInDocumentation { get; set; } = true;");
        sb.AppendLine("    public string? Version { get; set; }");
        sb.AppendLine("    public bool Deprecated { get; set; }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateEndpointConfigurationExtensions(StringBuilder sb, CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Extension methods for configuring Axiom endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static class AxiomEndpointConfigurationExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure Axiom endpoints with fluent API");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IApplicationBuilder UseAxiomEndpoints(");
        sb.AppendLine("        this IApplicationBuilder app,");
        sb.AppendLine("        Action<IAxiomEndpointsConfigurationBuilder> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var builder = new AxiomEndpointsConfigurationBuilder(app);");
        sb.AppendLine("        configure(builder);");
        sb.AppendLine("        return builder.Build();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add Axiom endpoint configuration services");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IServiceCollection AddAxiomEndpointConfiguration(");
        sb.AppendLine("        this IServiceCollection services,");
        sb.AppendLine("        Action<AxiomEndpointConfigurationOptions>? configure = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        var options = new AxiomEndpointConfigurationOptions();");
        sb.AppendLine("        configure?.Invoke(options);");
        sb.AppendLine("        services.AddSingleton(options);");
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate the endpoints configuration builder
        GenerateEndpointsConfigurationBuilder(sb);
    }

    private static void GenerateEndpointsConfigurationBuilder(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Interface for configuring multiple Axiom endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public interface IAxiomEndpointsConfigurationBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure global settings for all endpoints");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointsConfigurationBuilder WithGlobalSettings(Action<IAxiomEndpointBuilder> configure);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure a specific endpoint");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointsConfigurationBuilder ConfigureEndpoint<TEndpoint>(Action<IAxiomEndpointBuilder> configure);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure endpoints by route pattern");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointsConfigurationBuilder ConfigureRoute(string pattern, Action<IAxiomEndpointBuilder> configure);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure endpoints by tag");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IAxiomEndpointsConfigurationBuilder ConfigureByTag(string tag, Action<IAxiomEndpointBuilder> configure);");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Build the configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    IApplicationBuilder Build();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Implementation of endpoints configuration builder");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointsConfigurationBuilder : IAxiomEndpointsConfigurationBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly IApplicationBuilder _app;");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _endpointConfigurations = new();");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _routeConfigurations = new();");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _tagConfigurations = new();");
        sb.AppendLine("    private AxiomEndpointConfiguration? _globalConfiguration;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointsConfigurationBuilder(IApplicationBuilder app)");
        sb.AppendLine("    {");
        sb.AppendLine("        _app = app;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointsConfigurationBuilder WithGlobalSettings(Action<IAxiomEndpointBuilder> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var builder = new AxiomEndpointBuilder();");
        sb.AppendLine("        configure(builder);");
        sb.AppendLine("        _globalConfiguration = builder.Build();");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointsConfigurationBuilder ConfigureEndpoint<TEndpoint>(Action<IAxiomEndpointBuilder> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var builder = new AxiomEndpointBuilder();");
        sb.AppendLine("        configure(builder);");
        sb.AppendLine("        _endpointConfigurations[typeof(TEndpoint).Name] = builder.Build();");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointsConfigurationBuilder ConfigureRoute(string pattern, Action<IAxiomEndpointBuilder> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var builder = new AxiomEndpointBuilder();");
        sb.AppendLine("        configure(builder);");
        sb.AppendLine("        _routeConfigurations[pattern] = builder.Build();");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IAxiomEndpointsConfigurationBuilder ConfigureByTag(string tag, Action<IAxiomEndpointBuilder> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var builder = new AxiomEndpointBuilder();");
        sb.AppendLine("        configure(builder);");
        sb.AppendLine("        _tagConfigurations[tag] = builder.Build();");
        sb.AppendLine("        return this;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public IApplicationBuilder Build()");
        sb.AppendLine("    {");
        sb.AppendLine("        // Apply configurations to endpoints");
        sb.AppendLine("        var configurationsService = new AxiomEndpointConfigurationsService(");
        sb.AppendLine("            _globalConfiguration,");
        sb.AppendLine("            _endpointConfigurations,");
        sb.AppendLine("            _routeConfigurations,");
        sb.AppendLine("            _tagConfigurations);");
        sb.AppendLine();
        sb.AppendLine("        _app.ApplicationServices.GetService<IServiceCollection>()?");
        sb.AppendLine("            .AddSingleton<IAxiomEndpointConfigurationsService>(configurationsService);");
        sb.AppendLine();
        sb.AppendLine("        return _app;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate configuration options and service
        GenerateConfigurationService(sb);
    }

    private static void GenerateConfigurationService(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Service for managing endpoint configurations");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public interface IAxiomEndpointConfigurationsService");
        sb.AppendLine("{");
        sb.AppendLine("    AxiomEndpointConfiguration? GetConfigurationForEndpoint(string endpointName);");
        sb.AppendLine("    AxiomEndpointConfiguration? GetConfigurationForRoute(string route);");
        sb.AppendLine("    AxiomEndpointConfiguration? GetConfigurationForTag(string tag);");
        sb.AppendLine("    AxiomEndpointConfiguration? GetGlobalConfiguration();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Implementation of endpoint configurations service");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointConfigurationsService : IAxiomEndpointConfigurationsService");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly AxiomEndpointConfiguration? _globalConfiguration;");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _endpointConfigurations;");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _routeConfigurations;");
        sb.AppendLine("    private readonly Dictionary<string, AxiomEndpointConfiguration> _tagConfigurations;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfigurationsService(");
        sb.AppendLine("        AxiomEndpointConfiguration? globalConfiguration,");
        sb.AppendLine("        Dictionary<string, AxiomEndpointConfiguration> endpointConfigurations,");
        sb.AppendLine("        Dictionary<string, AxiomEndpointConfiguration> routeConfigurations,");
        sb.AppendLine("        Dictionary<string, AxiomEndpointConfiguration> tagConfigurations)");
        sb.AppendLine("    {");
        sb.AppendLine("        _globalConfiguration = globalConfiguration;");
        sb.AppendLine("        _endpointConfigurations = endpointConfigurations;");
        sb.AppendLine("        _routeConfigurations = routeConfigurations;");
        sb.AppendLine("        _tagConfigurations = tagConfigurations;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfiguration? GetConfigurationForEndpoint(string endpointName)");
        sb.AppendLine("    {");
        sb.AppendLine("        return _endpointConfigurations.GetValueOrDefault(endpointName);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfiguration? GetConfigurationForRoute(string route)");
        sb.AppendLine("    {");
        sb.AppendLine("        return _routeConfigurations.GetValueOrDefault(route);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfiguration? GetConfigurationForTag(string tag)");
        sb.AppendLine("    {");
        sb.AppendLine("        return _tagConfigurations.GetValueOrDefault(tag);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointConfiguration? GetGlobalConfiguration()");
        sb.AppendLine("    {");
        sb.AppendLine("        return _globalConfiguration;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Options for Axiom endpoint configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointConfigurationOptions");
        sb.AppendLine("{");
        sb.AppendLine("    public bool EnableFluentConfiguration { get; set; } = true;");
        sb.AppendLine("    public bool ValidateConfigurations { get; set; } = true;");
        sb.AppendLine("    public bool LogConfigurationChanges { get; set; } = false;");
        sb.AppendLine("    public Dictionary<string, object> DefaultSettings { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateEndpointConfigurators(StringBuilder sb, ImmutableArray<EndpointInfo> endpoints, CompilationInfo compilation)
    {
        if (endpoints.IsEmpty)
            return;

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Strongly-typed configurators for specific endpoints");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class AxiomEndpointConfigurators");
        sb.AppendLine("{");

        var serviceGroups = endpoints
            .Where(e => !string.IsNullOrEmpty(e.TypeName))
            .GroupBy(e => ExtractServiceName(e.Namespace))
            .ToArray();

        foreach (var serviceGroup in serviceGroups)
        {
            var serviceName = serviceGroup.Key;
            sb.AppendLine($"    /// <summary>");
            sb.AppendLine($"    /// Configure {serviceName} service endpoints");
            sb.AppendLine($"    /// </summary>");
            sb.AppendLine($"    public static IAxiomEndpointsConfigurationBuilder Configure{serviceName}Endpoints(");
            sb.AppendLine($"        this IAxiomEndpointsConfigurationBuilder builder,");
            sb.AppendLine($"        Action<I{serviceName}EndpointConfigurator> configure)");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        var configurator = new {serviceName}EndpointConfigurator(builder);");
            sb.AppendLine($"        configure(configurator);");
            sb.AppendLine($"        return builder;");
            sb.AppendLine($"    }}");
            sb.AppendLine();

            // Generate service-specific configurator interface
            sb.AppendLine($"    public interface I{serviceName}EndpointConfigurator");
            sb.AppendLine($"    {{");

            foreach (var endpoint in serviceGroup)
            {
                var methodName = endpoint.TypeName.Replace("Endpoint", "").Replace("Handler", "");
                sb.AppendLine($"        I{serviceName}EndpointConfigurator Configure{methodName}(Action<IAxiomEndpointBuilder> configure);");
            }

            sb.AppendLine($"    }}");
            sb.AppendLine();

            // Generate service-specific configurator implementation
            sb.AppendLine($"    public class {serviceName}EndpointConfigurator : I{serviceName}EndpointConfigurator");
            sb.AppendLine($"    {{");
            sb.AppendLine($"        private readonly IAxiomEndpointsConfigurationBuilder _builder;");
            sb.AppendLine();
            sb.AppendLine($"        public {serviceName}EndpointConfigurator(IAxiomEndpointsConfigurationBuilder builder)");
            sb.AppendLine($"        {{");
            sb.AppendLine($"            _builder = builder;");
            sb.AppendLine($"        }}");
            sb.AppendLine();

            foreach (var endpoint in serviceGroup)
            {
                var methodName = endpoint.TypeName.Replace("Endpoint", "").Replace("Handler", "");
                sb.AppendLine($"        public I{serviceName}EndpointConfigurator Configure{methodName}(Action<IAxiomEndpointBuilder> configure)");
                sb.AppendLine($"        {{");
                sb.AppendLine($"            _builder.ConfigureEndpoint<{endpoint.TypeName}>(configure);");
                sb.AppendLine($"            return this;");
                sb.AppendLine($"        }}");
                sb.AppendLine();
            }

            sb.AppendLine($"    }}");
            sb.AppendLine();
        }

        sb.AppendLine("}");
    }

    private static string ExtractServiceName(string namespaceName)
    {
        var parts = namespaceName.Split('.');
        return parts.Length > 0 ? parts[parts.Length - 1] : "Unknown";
    }
}