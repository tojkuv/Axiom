using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace AxiomEndpoints.SourceGenerators;

internal static class ValidationGenerator
{
    public static string GenerateValidators(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        var requestTypes = endpoints
            .Where(e => !string.IsNullOrEmpty(e.RequestType) && !IsBuiltInType(e.RequestType))
            .Select(e => e.RequestType)
            .Distinct()
            .ToArray();

        if (requestTypes.Length == 0)
            return string.Empty;

        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using FluentValidation;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated.Validation;");
        sb.AppendLine();

        // Generate validators for each request type
        foreach (var requestType in requestTypes)
        {
            GenerateValidator(sb, requestType);
        }

        // Generate registration extension
        GenerateValidatorRegistration(sb, requestTypes);

        // Generate validation middleware
        GenerateValidationMiddleware(sb, compilation);

        return sb.ToString();
    }

    private static void GenerateValidator(StringBuilder sb, string requestType)
    {
        var typeName = GetTypeName(requestType);
        var validatorName = $"{typeName}Validator";

        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine($"public class {validatorName} : AbstractValidator<{requestType}>");
        sb.AppendLine("{");
        sb.AppendLine($"    public {validatorName}()");
        sb.AppendLine("    {");
        sb.AppendLine("        // Auto-generated validation rules from Data Annotations");
        sb.AppendLine("        // Note: In full implementation, this would analyze the type's properties");
        sb.AppendLine("        // and generate FluentValidation rules from Data Annotation attributes");
        sb.AppendLine();
        sb.AppendLine("        // Example rules that would be generated:");
        sb.AppendLine("        // RuleFor(x => x.Name).NotEmpty().Length(2, 100);");
        sb.AppendLine("        // RuleFor(x => x.Email).NotEmpty().EmailAddress();");
        sb.AppendLine("        // RuleFor(x => x.Age).InclusiveBetween(18, 120);");
        sb.AppendLine();
        sb.AppendLine("        // TODO: Generate actual rules by analyzing the request type properties");
        sb.AppendLine("        GenerateValidationRules();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private void GenerateValidationRules()");
        sb.AppendLine("    {");
        sb.AppendLine("        // This method would contain the generated validation rules");
        sb.AppendLine("        // based on Data Annotation attributes found on the request type");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateValidatorRegistration(StringBuilder sb, string[] requestTypes)
    {
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static class ValidationServiceCollectionExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    public static IServiceCollection AddAxiomValidators(this IServiceCollection services)");
        sb.AppendLine("    {");

        foreach (var requestType in requestTypes)
        {
            var typeName = GetTypeName(requestType);
            var validatorName = $"{typeName}Validator";
            sb.AppendLine($"        services.AddScoped<IValidator<{requestType}>, {validatorName}>();");
        }

        sb.AppendLine();
        sb.AppendLine("        // Add validation middleware");
        sb.AppendLine("        services.AddScoped<AxiomValidationMiddleware>();");
        sb.AppendLine();
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateValidationMiddleware(StringBuilder sb, CompilationInfo compilation)
    {
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationMiddleware");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly RequestDelegate _next;");
        sb.AppendLine("    private readonly IServiceProvider _serviceProvider;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomValidationMiddleware(RequestDelegate next, IServiceProvider serviceProvider)");
        sb.AppendLine("    {");
        sb.AppendLine("        _next = next;");
        sb.AppendLine("        _serviceProvider = serviceProvider;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public async Task InvokeAsync(HttpContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        var endpoint = context.GetEndpoint();");
        sb.AppendLine("        if (endpoint?.Metadata.GetMetadata<ValidationMetadata>() is ValidationMetadata validationMetadata)");
        sb.AppendLine("        {");
        sb.AppendLine("            var validationResult = await ValidateRequest(context, validationMetadata);");
        sb.AppendLine("            if (!validationResult.IsValid)");
        sb.AppendLine("            {");
        sb.AppendLine("                await WriteValidationErrorResponse(context, validationResult);");
        sb.AppendLine("                return;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            await _next(context);");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (ValidationException validationEx)");
        sb.AppendLine("        {");
        sb.AppendLine("            await HandleValidationException(context, validationEx);");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            await HandleException(context, ex);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task<ValidationResult> ValidateRequest(HttpContext context, ValidationMetadata metadata)");
        sb.AppendLine("    {");
        sb.AppendLine("        // TODO: Implement request validation logic");
        sb.AppendLine("        return new ValidationResult();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task WriteValidationErrorResponse(HttpContext context, ValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        var error = new ValidationApiError(validationResult);");
        sb.AppendLine("        context.Response.StatusCode = 400;");
        sb.AppendLine("        context.Response.ContentType = \"application/json\";");
        sb.AppendLine();
        sb.AppendLine("        var json = JsonSerializer.Serialize(error, new JsonSerializerOptions");
        sb.AppendLine("        {");
        sb.AppendLine("            PropertyNamingPolicy = JsonNamingPolicy.CamelCase");
        sb.AppendLine("        });");
        sb.AppendLine();
        sb.AppendLine("        await context.Response.WriteAsync(json);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task HandleValidationException(HttpContext context, ValidationException validationEx)");
        sb.AppendLine("    {");
        sb.AppendLine("        var error = new ValidationApiError(validationEx.Errors);");
        sb.AppendLine("        context.Response.StatusCode = 400;");
        sb.AppendLine("        context.Response.ContentType = \"application/json\";");
        sb.AppendLine();
        sb.AppendLine("        var json = JsonSerializer.Serialize(error);");
        sb.AppendLine("        await context.Response.WriteAsync(json);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task HandleException(HttpContext context, Exception exception)");
        sb.AppendLine("    {");
        sb.AppendLine("        var error = exception switch");
        sb.AppendLine("        {");
        sb.AppendLine("            NotFoundException notFoundEx => new ApiError");
        sb.AppendLine("            {");
        sb.AppendLine("                Type = \"not-found\",");
        sb.AppendLine("                Title = \"Resource not found\",");
        sb.AppendLine("                Detail = notFoundEx.Message,");
        sb.AppendLine("                Status = 404");
        sb.AppendLine("            },");
        sb.AppendLine("            UnauthorizedAccessException => new ApiError");
        sb.AppendLine("            {");
        sb.AppendLine("                Type = \"unauthorized\",");
        sb.AppendLine("                Title = \"Unauthorized access\",");
        sb.AppendLine("                Status = 401");
        sb.AppendLine("            },");
        sb.AppendLine("            _ => new ApiError");
        sb.AppendLine("            {");
        sb.AppendLine("                Type = \"internal-error\",");
        sb.AppendLine("                Title = \"An error occurred while processing your request.\",");
        sb.AppendLine("                Status = 500");
        sb.AppendLine("            }");
        sb.AppendLine("        };");
        sb.AppendLine();
        sb.AppendLine("        context.Response.StatusCode = error.Status;");
        sb.AppendLine("        context.Response.ContentType = \"application/json\";");
        sb.AppendLine();
        sb.AppendLine("        var json = JsonSerializer.Serialize(error);");
        sb.AppendLine("        await context.Response.WriteAsync(json);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate supporting classes
        GenerateSupportingClasses(sb);
    }

    private static void GenerateSupportingClasses(StringBuilder sb)
    {
        // ValidationMetadata class
        sb.AppendLine("public class ValidationMetadata");
        sb.AppendLine("{");
        sb.AppendLine("    public Type RequestType { get; set; }");
        sb.AppendLine("    public bool IsRequired { get; set; } = true;");
        sb.AppendLine("    public string[] CustomValidators { get; set; } = Array.Empty<string>();");
        sb.AppendLine("}");
        sb.AppendLine();

        // ApiError classes
        sb.AppendLine("public class ApiError");
        sb.AppendLine("{");
        sb.AppendLine("    public string Type { get; set; } = \"\";");
        sb.AppendLine("    public string Title { get; set; } = \"\";");
        sb.AppendLine("    public string Detail { get; set; } = \"\";");
        sb.AppendLine("    public int Status { get; set; }");
        sb.AppendLine("    public string Instance { get; set; } = \"\";");
        sb.AppendLine("    public Dictionary<string, object> Extensions { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("public class ValidationApiError : ApiError");
        sb.AppendLine("{");
        sb.AppendLine("    public Dictionary<string, string[]> Errors { get; set; } = new();");
        sb.AppendLine();
        sb.AppendLine("    public ValidationApiError(ValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        Type = \"validation-error\";");
        sb.AppendLine("        Title = \"One or more validation errors occurred.\";");
        sb.AppendLine("        Status = 400;");
        sb.AppendLine();
        sb.AppendLine("        Errors = validationResult.Errors");
        sb.AppendLine("            .GroupBy(e => e.PropertyName)");
        sb.AppendLine("            .ToDictionary(g => g.Key, g => g.Select(e => e.ErrorMessage).ToArray());");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public ValidationApiError(IEnumerable<FluentValidation.Results.ValidationFailure> validationFailures)");
        sb.AppendLine("    {");
        sb.AppendLine("        Type = \"validation-error\";");
        sb.AppendLine("        Title = \"One or more validation errors occurred.\";");
        sb.AppendLine("        Status = 400;");
        sb.AppendLine();
        sb.AppendLine("        Errors = validationFailures");
        sb.AppendLine("            .GroupBy(e => e.PropertyName)");
        sb.AppendLine("            .ToDictionary(g => g.Key, g => g.Select(e => e.ErrorMessage).ToArray());");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Exception classes
        sb.AppendLine("public class NotFoundException : Exception");
        sb.AppendLine("{");
        sb.AppendLine("    public NotFoundException(string message) : base(message) { }");
        sb.AppendLine("    public NotFoundException(string message, Exception innerException) : base(message, innerException) { }");
        sb.AppendLine("}");
    }

    private static string GetTypeName(string fullTypeName)
    {
        var parts = fullTypeName.Split('.');
        return parts[parts.Length - 1];
    }

    private static bool IsBuiltInType(string typeName)
    {
        return typeName switch
        {
            "string" or "int" or "long" or "bool" or "double" or "float" or "decimal" or "DateTime" or "Guid" => true,
            _ when typeName.StartsWith("System.") => true,
            _ when typeName.Contains("TRequest") || typeName.Contains("TResponse") => true,
            _ => false
        };
    }
}