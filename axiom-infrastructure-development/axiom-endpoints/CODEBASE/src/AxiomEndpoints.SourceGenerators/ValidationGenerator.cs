using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace AxiomEndpoints.SourceGenerators;

internal static class ValidationGenerator
{
    public static string GenerateValidationCode(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.AspNetCore.Http;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.Extensions.Logging;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated.Validation;");
        sb.AppendLine();

        // Generate validation attributes
        GenerateValidationAttributes(sb);

        // Generate validation service interface and implementation
        GenerateValidationService(sb);

        // Generate validation middleware
        GenerateValidationMiddleware(sb);

        // Generate validation extensions
        GenerateValidationExtensions(sb, compilation);

        // Generate error formatters
        GenerateErrorFormatters(sb);

        return sb.ToString();
    }

    private static void GenerateValidationAttributes(StringBuilder sb)
    {
        // Generate NotEmptyGuid attribute
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Validates that a Guid is not empty");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class NotEmptyGuidAttribute : ValidationAttribute");
        sb.AppendLine("{");
        sb.AppendLine("    public override bool IsValid(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value is Guid guid)");
        sb.AppendLine("            return guid != Guid.Empty;");
        sb.AppendLine("        return value != null;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public override string FormatErrorMessage(string name)");
        sb.AppendLine("    {");
        sb.AppendLine("        return $\"The {name} field cannot be an empty GUID.\";");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate ValidEnum attribute
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Validates that an enum value is defined");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class ValidEnumAttribute : ValidationAttribute");
        sb.AppendLine("{");
        sb.AppendLine("    public override bool IsValid(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value == null) return true; // Let Required handle null");
        sb.AppendLine("        var enumType = value.GetType();");
        sb.AppendLine("        return enumType.IsEnum && Enum.IsDefined(enumType, value);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public override string FormatErrorMessage(string name)");
        sb.AppendLine("    {");
        sb.AppendLine("        return $\"The {name} field contains an invalid enum value.\";");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate PositiveNumber attribute
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Validates that a number is positive");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class PositiveNumberAttribute : ValidationAttribute");
        sb.AppendLine("{");
        sb.AppendLine("    public override bool IsValid(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value == null) return true;");
        sb.AppendLine("        return value switch");
        sb.AppendLine("        {");
        sb.AppendLine("            int i => i > 0,");
        sb.AppendLine("            long l => l > 0,");
        sb.AppendLine("            decimal d => d > 0,");
        sb.AppendLine("            double db => db > 0,");
        sb.AppendLine("            float f => f > 0,");
        sb.AppendLine("            _ => false");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public override string FormatErrorMessage(string name)");
        sb.AppendLine("    {");
        sb.AppendLine("        return $\"The {name} field must be a positive number.\";");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate ValidUrl attribute
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Validates that a string is a valid URL");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class ValidUrlAttribute : ValidationAttribute");
        sb.AppendLine("{");
        sb.AppendLine("    public bool RequireHttps { get; set; }");
        sb.AppendLine();
        sb.AppendLine("    public override bool IsValid(object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (value == null || value is not string url) return true;");
        sb.AppendLine("        if (string.IsNullOrWhiteSpace(url)) return true;");
        sb.AppendLine();
        sb.AppendLine("        if (!Uri.TryCreate(url, UriKind.Absolute, out var uri))");
        sb.AppendLine("            return false;");
        sb.AppendLine();
        sb.AppendLine("        if (RequireHttps && uri.Scheme != \"https\")");
        sb.AppendLine("            return false;");
        sb.AppendLine();
        sb.AppendLine("        return uri.Scheme == \"http\" || uri.Scheme == \"https\";");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public override string FormatErrorMessage(string name)");
        sb.AppendLine("    {");
        sb.AppendLine("        var message = $\"The {name} field must be a valid URL.\";");
        sb.AppendLine("        if (RequireHttps)");
        sb.AppendLine("            message += \" HTTPS is required.\";");
        sb.AppendLine("        return message;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateValidationService(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Service interface for endpoint validation");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public interface IAxiomValidationService");
        sb.AppendLine("{");
        sb.AppendLine("    Task<AxiomValidationResult> ValidateAsync<T>(T instance, string? prefix = null);");
        sb.AppendLine("    Task<AxiomValidationResult> ValidateModelAsync(object model, Type modelType, string? prefix = null);");
        sb.AppendLine("    AxiomValidationResult ValidateProperty(object instance, string propertyName, object? value);");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Default implementation of validation service");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationService : IAxiomValidationService");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly ILogger<AxiomValidationService> _logger;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomValidationService(ILogger<AxiomValidationService> logger)");
        sb.AppendLine("    {");
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public async Task<AxiomValidationResult> ValidateAsync<T>(T instance, string? prefix = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (instance == null)");
        sb.AppendLine("        {");
        sb.AppendLine("            return AxiomValidationResult.Failed(\"Instance cannot be null\");");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return await ValidateModelAsync(instance, typeof(T), prefix);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public async Task<AxiomValidationResult> ValidateModelAsync(object model, Type modelType, string? prefix = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        var context = new ValidationContext(model);");
        sb.AppendLine("        var validationResults = new List<ValidationResult>();");
        sb.AppendLine();
        sb.AppendLine("        var isValid = Validator.TryValidateObject(model, context, validationResults, true);");
        sb.AppendLine();
        sb.AppendLine("        await Task.CompletedTask; // For future async validation");
        sb.AppendLine();
        sb.AppendLine("        if (isValid)");
        sb.AppendLine("        {");
        sb.AppendLine("            _logger.LogDebug(\"Validation passed for {ModelType}\", modelType.Name);");
        sb.AppendLine("            return AxiomValidationResult.Success();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        var errors = validationResults");
        sb.AppendLine("            .Select(vr => new AxiomValidationError");
        sb.AppendLine("            {");
        sb.AppendLine("                Field = string.IsNullOrEmpty(prefix) ");
        sb.AppendLine("                    ? vr.MemberNames.FirstOrDefault() ?? \"Unknown\"");
        sb.AppendLine("                    : $\"{prefix}.{vr.MemberNames.FirstOrDefault() ?? \"Unknown\"}\",");
        sb.AppendLine("                Message = vr.ErrorMessage ?? \"Validation failed\",");
        sb.AppendLine("                Code = \"VALIDATION_FAILED\"");
        sb.AppendLine("            })");
        sb.AppendLine("            .ToList();");
        sb.AppendLine();
        sb.AppendLine("        _logger.LogWarning(\"Validation failed for {ModelType} with {ErrorCount} errors\", ");
        sb.AppendLine("            modelType.Name, errors.Count);");
        sb.AppendLine();
        sb.AppendLine("        return AxiomValidationResult.Failed(errors);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public AxiomValidationResult ValidateProperty(object instance, string propertyName, object? value)");
        sb.AppendLine("    {");
        sb.AppendLine("        var context = new ValidationContext(instance) { MemberName = propertyName };");
        sb.AppendLine("        var validationResults = new List<ValidationResult>();");
        sb.AppendLine();
        sb.AppendLine("        var isValid = Validator.TryValidateProperty(value, context, validationResults);");
        sb.AppendLine();
        sb.AppendLine("        if (isValid)");
        sb.AppendLine("            return AxiomValidationResult.Success();");
        sb.AppendLine();
        sb.AppendLine("        var errors = validationResults");
        sb.AppendLine("            .Select(vr => new AxiomValidationError");
        sb.AppendLine("            {");
        sb.AppendLine("                Field = propertyName,");
        sb.AppendLine("                Message = vr.ErrorMessage ?? \"Property validation failed\",");
        sb.AppendLine("                Code = \"PROPERTY_VALIDATION_FAILED\"");
        sb.AppendLine("            })");
        sb.AppendLine("            .ToList();");
        sb.AppendLine();
        sb.AppendLine("        return AxiomValidationResult.Failed(errors);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate validation result types
        GenerateValidationResultTypes(sb);
    }

    private static void GenerateValidationResultTypes(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Result of validation operation");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationResult");
        sb.AppendLine("{");
        sb.AppendLine("    public bool IsValid { get; private set; }");
        sb.AppendLine("    public IReadOnlyList<AxiomValidationError> Errors { get; private set; } = Array.Empty<AxiomValidationError>();");
        sb.AppendLine();
        sb.AppendLine("    private AxiomValidationResult(bool isValid, IReadOnlyList<AxiomValidationError> errors)");
        sb.AppendLine("    {");
        sb.AppendLine("        IsValid = isValid;");
        sb.AppendLine("        Errors = errors;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static AxiomValidationResult Success() => ");
        sb.AppendLine("        new(true, Array.Empty<AxiomValidationError>());");
        sb.AppendLine();
        sb.AppendLine("    public static AxiomValidationResult Failed(string message) => ");
        sb.AppendLine("        new(false, new[] { new AxiomValidationError { Message = message, Code = \"VALIDATION_FAILED\", Field = \"Unknown\" } });");
        sb.AppendLine();
        sb.AppendLine("    public static AxiomValidationResult Failed(IReadOnlyList<AxiomValidationError> errors) => ");
        sb.AppendLine("        new(false, errors);");
        sb.AppendLine();
        sb.AppendLine("    public AxiomError ToAxiomError()");
        sb.AppendLine("    {");
        sb.AppendLine("        var fields = Errors.ToDictionary(e => e.Field, e => e.Message);");
        sb.AppendLine("        return AxiomError.Validation(\"Validation failed\", fields);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Individual validation error");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationError");
        sb.AppendLine("{");
        sb.AppendLine("    public required string Field { get; set; }");
        sb.AppendLine("    public required string Message { get; set; }");
        sb.AppendLine("    public required string Code { get; set; }");
        sb.AppendLine("    public object? AttemptedValue { get; set; }");
        sb.AppendLine("    public Dictionary<string, object> Metadata { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateValidationMiddleware(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Middleware for automatic request validation");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationMiddleware");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly RequestDelegate _next;");
        sb.AppendLine("    private readonly IAxiomValidationService _validationService;");
        sb.AppendLine("    private readonly ILogger<AxiomValidationMiddleware> _logger;");
        sb.AppendLine("    private readonly AxiomValidationOptions _options;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomValidationMiddleware(");
        sb.AppendLine("        RequestDelegate next,");
        sb.AppendLine("        IAxiomValidationService validationService,");
        sb.AppendLine("        ILogger<AxiomValidationMiddleware> logger,");
        sb.AppendLine("        AxiomValidationOptions options)");
        sb.AppendLine("    {");
        sb.AppendLine("        _next = next;");
        sb.AppendLine("        _validationService = validationService;");
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("        _options = options;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public async Task InvokeAsync(HttpContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (!_options.EnableAutomaticValidation)");
        sb.AppendLine("        {");
        sb.AppendLine("            await _next(context);");
        sb.AppendLine("            return;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // Check if this endpoint requires validation");
        sb.AppendLine("        var endpoint = context.GetEndpoint();");
        sb.AppendLine("        if (endpoint?.Metadata.GetMetadata<AxiomValidationMetadata>() is not { } validationMetadata)");
        sb.AppendLine("        {");
        sb.AppendLine("            await _next(context);");
        sb.AppendLine("            return;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // For POST/PUT/PATCH requests, validate the request body");
        sb.AppendLine("        if (HttpMethods.IsPost(context.Request.Method) ||");
        sb.AppendLine("            HttpMethods.IsPut(context.Request.Method) ||");
        sb.AppendLine("            HttpMethods.IsPatch(context.Request.Method))");
        sb.AppendLine("        {");
        sb.AppendLine("            var validationResult = await ValidateRequestBody(context, validationMetadata);");
        sb.AppendLine("            if (!validationResult.IsValid)");
        sb.AppendLine("            {");
        sb.AppendLine("                await WriteValidationErrorResponse(context, validationResult);");
        sb.AppendLine("                return;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        await _next(context);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task<AxiomValidationResult> ValidateRequestBody(HttpContext context, AxiomValidationMetadata metadata)");
        sb.AppendLine("    {");
        sb.AppendLine("        // This would be implemented to extract and validate the request body");
        sb.AppendLine("        // based on the endpoint's request type");
        sb.AppendLine("        await Task.CompletedTask;");
        sb.AppendLine("        return AxiomValidationResult.Success();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private async Task WriteValidationErrorResponse(HttpContext context, AxiomValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        context.Response.StatusCode = 400;");
        sb.AppendLine("        context.Response.ContentType = \"application/json\";");
        sb.AppendLine();
        sb.AppendLine("        var error = validationResult.ToAxiomError();");
        sb.AppendLine("        var response = new");
        sb.AppendLine("        {");
        sb.AppendLine("            error = new");
        sb.AppendLine("            {");
        sb.AppendLine("                code = error.Code,");
        sb.AppendLine("                message = error.Message,");
        sb.AppendLine("                type = error.Type.ToString(),");
        sb.AppendLine("                fields = error.Fields,");
        sb.AppendLine("                correlationId = error.CorrelationId");
        sb.AppendLine("            }");
        sb.AppendLine("        };");
        sb.AppendLine();
        sb.AppendLine("        var json = System.Text.Json.JsonSerializer.Serialize(response);");
        sb.AppendLine("        await context.Response.WriteAsync(json);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate validation metadata
        GenerateValidationMetadata(sb);
    }

    private static void GenerateValidationMetadata(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Metadata for endpoint validation configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationMetadata");
        sb.AppendLine("{");
        sb.AppendLine("    public bool ValidateRequest { get; set; } = true;");
        sb.AppendLine("    public bool ValidateResponse { get; set; } = false;");
        sb.AppendLine("    public Type? RequestType { get; set; }");
        sb.AppendLine("    public Type? ResponseType { get; set; }");
        sb.AppendLine("    public string[] IgnoredProperties { get; set; } = Array.Empty<string>();");
        sb.AppendLine("    public Dictionary<string, object> CustomValidators { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Options for validation behavior");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomValidationOptions");
        sb.AppendLine("{");
        sb.AppendLine("    public bool EnableAutomaticValidation { get; set; } = true;");
        sb.AppendLine("    public bool ValidateQueryParameters { get; set; } = true;");
        sb.AppendLine("    public bool ValidateRouteParameters { get; set; } = true;");
        sb.AppendLine("    public bool ValidateHeaders { get; set; } = false;");
        sb.AppendLine("    public bool ReturnDetailedErrors { get; set; } = true;");
        sb.AppendLine("    public int MaxErrorsToReturn { get; set; } = 10;");
        sb.AppendLine("    public bool LogValidationErrors { get; set; } = true;");
        sb.AppendLine("    public string[] ExcludedEndpoints { get; set; } = Array.Empty<string>();");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateValidationExtensions(StringBuilder sb, CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Extension methods for validation configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static class AxiomValidationExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add Axiom validation services");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IServiceCollection AddAxiomValidation(");
        sb.AppendLine("        this IServiceCollection services,");
        sb.AppendLine("        Action<AxiomValidationOptions>? configure = null)");
        sb.AppendLine("    {");
        sb.AppendLine("        var options = new AxiomValidationOptions();");
        sb.AppendLine("        configure?.Invoke(options);");
        sb.AppendLine();
        sb.AppendLine("        services.AddSingleton(options);");
        sb.AppendLine("        services.AddScoped<IAxiomValidationService, AxiomValidationService>();");
        sb.AppendLine("        services.AddScoped<AxiomValidationMiddleware>();");
        sb.AppendLine();
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Use Axiom validation middleware");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IApplicationBuilder UseAxiomValidation(this IApplicationBuilder app)");
        sb.AppendLine("    {");
        sb.AppendLine("        return app.UseMiddleware<AxiomValidationMiddleware>();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure validation for an endpoint builder (requires fluent configuration)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <remarks>");
        sb.AppendLine("    /// This extension method is available when the fluent configuration generator is also enabled.");
        sb.AppendLine("    /// </remarks>");
        sb.AppendLine("    //public static IAxiomEndpointBuilder WithValidation(");
        sb.AppendLine("    //    this IAxiomEndpointBuilder builder,");
        sb.AppendLine("    //    Action<AxiomValidationMetadata>? configure = null)");
        sb.AppendLine("    //{");
        sb.AppendLine("    //    var metadata = new AxiomValidationMetadata();");
        sb.AppendLine("    //    configure?.Invoke(metadata);");
        sb.AppendLine("    //    return builder.WithMetadata(metadata);");
        sb.AppendLine("    //}");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Validate a model manually");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static async Task<Result<T>> ValidateAndReturn<T>(");
        sb.AppendLine("        this IAxiomValidationService validationService,");
        sb.AppendLine("        T model) where T : notnull");
        sb.AppendLine("    {");
        sb.AppendLine("        var validationResult = await validationService.ValidateAsync(model);");
        sb.AppendLine("        if (!validationResult.IsValid)");
        sb.AppendLine("        {");
        sb.AppendLine("            return ResultFactory.Failure<T>(validationResult.ToAxiomError());");
        sb.AppendLine("        }");
        sb.AppendLine("        return ResultFactory.Success(model);");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateErrorFormatters(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Formatters for validation errors");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static class AxiomValidationErrorFormatters");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Format validation errors as a standardized response");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static object FormatValidationErrors(AxiomValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        return new");
        sb.AppendLine("        {");
        sb.AppendLine("            type = \"validation_failed\",");
        sb.AppendLine("            title = \"One or more validation errors occurred\",");
        sb.AppendLine("            status = 400,");
        sb.AppendLine("            errors = validationResult.Errors.GroupBy(e => e.Field)");
        sb.AppendLine("                .ToDictionary(");
        sb.AppendLine("                    g => g.Key,");
        sb.AppendLine("                    g => g.Select(e => e.Message).ToArray())");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Format validation errors as RFC 7807 Problem Details");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static object FormatAsProblemDetails(AxiomValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        return new");
        sb.AppendLine("        {");
        sb.AppendLine("            type = \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",");
        sb.AppendLine("            title = \"One or more validation errors occurred.\",");
        sb.AppendLine("            status = 400,");
        sb.AppendLine("            detail = \"Please refer to the errors property for additional details.\",");
        sb.AppendLine("            instance = (string?)null,");
        sb.AppendLine("            errors = validationResult.Errors.GroupBy(e => e.Field)");
        sb.AppendLine("                .ToDictionary(");
        sb.AppendLine("                    g => g.Key,");
        sb.AppendLine("                    g => g.Select(e => e.Message).ToArray())");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Format validation errors as a simple error response");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static object FormatAsSimpleError(AxiomValidationResult validationResult)");
        sb.AppendLine("    {");
        sb.AppendLine("        return new");
        sb.AppendLine("        {");
        sb.AppendLine("            success = false,");
        sb.AppendLine("            message = \"Validation failed\",");
        sb.AppendLine("            errors = validationResult.Errors.Select(e => new");
        sb.AppendLine("            {");
        sb.AppendLine("                field = e.Field,");
        sb.AppendLine("                message = e.Message,");
        sb.AppendLine("                code = e.Code");
        sb.AppendLine("            }).ToArray()");
        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine("}");
    }
}