using System.Collections.Immutable;
using System.Text;

namespace AxiomEndpoints.SourceGenerators;

internal static class RouteTemplateGenerator
{
    public static string GenerateRouteTemplates(
        ImmutableArray<RouteInfo> routes,
        CompilationInfo compilation)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Collections.Frozen;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated;");
        sb.AppendLine();
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("internal static partial class RouteTemplates");
        sb.AppendLine("{");
        sb.AppendLine("    private static readonly FrozenDictionary<Type, string> _templates;");
        sb.AppendLine();
        sb.AppendLine("    static RouteTemplates()");
        sb.AppendLine("    {");
        sb.AppendLine("        var templates = new Dictionary<Type, string>");
        sb.AppendLine("        {");

        foreach (var route in routes)
        {
            var template = RouteTemplateBuilder.BuildTemplate(route);
            sb.AppendLine($"            [typeof({route.Namespace}.{route.TypeName})] = \"{template}\",");
        }

        sb.AppendLine("        };");
        sb.AppendLine("        _templates = templates.ToFrozenDictionary();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static string GetTemplate<TRoute>() where TRoute : IRoute<TRoute>");
        sb.AppendLine("    {");
        sb.AppendLine("        return _templates[typeof(TRoute)];");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static string? GetTemplate(Type routeType)");
        sb.AppendLine("    {");
        sb.AppendLine("        return _templates.GetValueOrDefault(routeType);");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}