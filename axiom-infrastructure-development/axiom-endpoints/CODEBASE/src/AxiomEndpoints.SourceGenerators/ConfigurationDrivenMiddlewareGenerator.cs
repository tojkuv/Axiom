using System;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace AxiomEndpoints.SourceGenerators;

internal static class ConfigurationDrivenMiddlewareGenerator
{
    public static string GenerateMiddlewareConfiguration(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        // Always generate middleware configuration models even when no endpoints exist
        // This allows applications to use configuration-driven middleware setup

        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using Microsoft.AspNetCore.Builder;");
        sb.AppendLine("using Microsoft.AspNetCore.Http;");
        sb.AppendLine("using Microsoft.Extensions.Configuration;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.Extensions.Logging;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated.Middleware;");
        sb.AppendLine();

        // Generate middleware configuration models
        GenerateMiddlewareConfigurationModels(sb);

        // Generate middleware pipeline builder
        GenerateMiddlewarePipelineBuilder(sb, endpoints, compilation);

        // Generate configuration extensions
        GenerateConfigurationExtensions(sb, compilation);

        return sb.ToString();
    }

    private static void GenerateMiddlewareConfigurationModels(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Configuration for Axiom middleware pipeline");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomMiddlewareConfiguration");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Global middleware configuration applied to all endpoints");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public GlobalMiddlewareConfig Global { get; set; } = new();");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Per-endpoint middleware overrides");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public Dictionary<string, EndpointMiddlewareConfig> Endpoints { get; set; } = new();");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Route-based middleware configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public Dictionary<string, RouteMiddlewareConfig> Routes { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Global middleware configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class GlobalMiddlewareConfig");
        sb.AppendLine("{");
        sb.AppendLine("    public bool EnableCors { get; set; } = true;");
        sb.AppendLine("    public bool EnableCompression { get; set; } = true;");
        sb.AppendLine("    public bool EnableRateLimiting { get; set; } = false;");
        sb.AppendLine("    public bool EnableAuthentication { get; set; } = true;");
        sb.AppendLine("    public bool EnableAuthorization { get; set; } = true;");
        sb.AppendLine("    public bool EnableRequestLogging { get; set; } = true;");
        sb.AppendLine("    public bool EnableErrorHandling { get; set; } = true;");
        sb.AppendLine("    public bool EnableHealthChecks { get; set; } = true;");
        sb.AppendLine("    public bool EnableMetrics { get; set; } = true;");
        sb.AppendLine("    public bool EnableResponseCaching { get; set; } = false;");
        sb.AppendLine("    public int RequestTimeoutSeconds { get; set; } = 30;");
        sb.AppendLine("    public string[]? AllowedOrigins { get; set; }");
        sb.AppendLine("    public string[]? AllowedMethods { get; set; }");
        sb.AppendLine("    public string[]? AllowedHeaders { get; set; }");
        sb.AppendLine("    public Dictionary<string, object> CustomSettings { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Per-endpoint middleware configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class EndpointMiddlewareConfig");
        sb.AppendLine("{");
        sb.AppendLine("    public bool? EnableCors { get; set; }");
        sb.AppendLine("    public bool? EnableCompression { get; set; }");
        sb.AppendLine("    public bool? EnableRateLimiting { get; set; }");
        sb.AppendLine("    public bool? EnableAuthentication { get; set; }");
        sb.AppendLine("    public bool? EnableAuthorization { get; set; }");
        sb.AppendLine("    public bool? EnableRequestLogging { get; set; }");
        sb.AppendLine("    public bool? EnableErrorHandling { get; set; }");
        sb.AppendLine("    public bool? EnableResponseCaching { get; set; }");
        sb.AppendLine("    public int? RequestTimeoutSeconds { get; set; }");
        sb.AppendLine("    public string[]? RequiredScopes { get; set; }");
        sb.AppendLine("    public string[]? RequiredRoles { get; set; }");
        sb.AppendLine("    public int? RateLimitPerMinute { get; set; }");
        sb.AppendLine("    public int? CacheDurationSeconds { get; set; }");
        sb.AppendLine("    public Dictionary<string, object> CustomSettings { get; set; } = new();");
        sb.AppendLine("}");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Route-based middleware configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class RouteMiddlewareConfig : EndpointMiddlewareConfig");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Route pattern (supports wildcards like /api/v1/*)");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public string RoutePattern { get; set; } = string.Empty;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// HTTP methods this configuration applies to");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public string[]? HttpMethods { get; set; }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateMiddlewarePipelineBuilder(StringBuilder sb, ImmutableArray<EndpointInfo> endpoints, CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Builder for configuration-driven middleware pipeline");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomMiddlewarePipelineBuilder");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly IApplicationBuilder _app;");
        sb.AppendLine("    private readonly AxiomMiddlewareConfiguration _config;");
        sb.AppendLine("    private readonly ILogger<AxiomMiddlewarePipelineBuilder> _logger;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomMiddlewarePipelineBuilder(");
        sb.AppendLine("        IApplicationBuilder app,");
        sb.AppendLine("        AxiomMiddlewareConfiguration config,");
        sb.AppendLine("        ILogger<AxiomMiddlewarePipelineBuilder> logger)");
        sb.AppendLine("    {");
        sb.AppendLine("        _app = app;");
        sb.AppendLine("        _config = config;");
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Build the complete middleware pipeline based on configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public IApplicationBuilder Build()");
        sb.AppendLine("    {");
        sb.AppendLine("        _logger.LogInformation(\"Building Axiom middleware pipeline from configuration\");");
        sb.AppendLine();

        // Add ordered middleware based on configuration
        sb.AppendLine("        // Error handling (first in pipeline)");
        sb.AppendLine("        if (_config.Global.EnableErrorHandling)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseMiddleware<AxiomErrorHandlingMiddleware>();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Request logging");
        sb.AppendLine("        if (_config.Global.EnableRequestLogging)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseMiddleware<AxiomRequestLoggingMiddleware>();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // CORS");
        sb.AppendLine("        if (_config.Global.EnableCors)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseCors(policy =>");
        sb.AppendLine("            {");
        sb.AppendLine("                if (_config.Global.AllowedOrigins?.Length > 0)");
        sb.AppendLine("                    policy.WithOrigins(_config.Global.AllowedOrigins);");
        sb.AppendLine("                else");
        sb.AppendLine("                    policy.AllowAnyOrigin();");
        sb.AppendLine();
        sb.AppendLine("                if (_config.Global.AllowedMethods?.Length > 0)");
        sb.AppendLine("                    policy.WithMethods(_config.Global.AllowedMethods);");
        sb.AppendLine("                else");
        sb.AppendLine("                    policy.AllowAnyMethod();");
        sb.AppendLine();
        sb.AppendLine("                if (_config.Global.AllowedHeaders?.Length > 0)");
        sb.AppendLine("                    policy.WithHeaders(_config.Global.AllowedHeaders);");
        sb.AppendLine("                else");
        sb.AppendLine("                    policy.AllowAnyHeader();");
        sb.AppendLine("            });");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Authentication");
        sb.AppendLine("        if (_config.Global.EnableAuthentication)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseAuthentication();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Authorization");
        sb.AppendLine("        if (_config.Global.EnableAuthorization)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseAuthorization();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Rate limiting");
        sb.AppendLine("        if (_config.Global.EnableRateLimiting)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseMiddleware<AxiomRateLimitingMiddleware>();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Response caching");
        sb.AppendLine("        if (_config.Global.EnableResponseCaching)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseResponseCaching();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Compression");
        sb.AppendLine("        if (_config.Global.EnableCompression)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseResponseCompression();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Metrics collection");
        sb.AppendLine("        if (_config.Global.EnableMetrics)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseMiddleware<AxiomMetricsMiddleware>();");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Health checks");
        sb.AppendLine("        if (_config.Global.EnableHealthChecks)");
        sb.AppendLine("        {");
        sb.AppendLine("            _app.UseHealthChecks(\"/health\");");
        sb.AppendLine("        }");
        sb.AppendLine();

        sb.AppendLine("        // Per-endpoint middleware configuration");
        sb.AppendLine("        _app.UseMiddleware<AxiomEndpointSpecificMiddleware>(_config);");
        sb.AppendLine();

        sb.AppendLine("        _logger.LogInformation(\"Axiom middleware pipeline configured successfully\");");
        sb.AppendLine("        return _app;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate endpoint-specific middleware
        GenerateEndpointSpecificMiddleware(sb, endpoints);
    }

    private static void GenerateEndpointSpecificMiddleware(StringBuilder sb, ImmutableArray<EndpointInfo> endpoints)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Middleware that applies endpoint-specific configuration");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public class AxiomEndpointSpecificMiddleware");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly RequestDelegate _next;");
        sb.AppendLine("    private readonly AxiomMiddlewareConfiguration _config;");
        sb.AppendLine("    private readonly ILogger<AxiomEndpointSpecificMiddleware> _logger;");
        sb.AppendLine();
        sb.AppendLine("    public AxiomEndpointSpecificMiddleware(");
        sb.AppendLine("        RequestDelegate next,");
        sb.AppendLine("        AxiomMiddlewareConfiguration config,");
        sb.AppendLine("        ILogger<AxiomEndpointSpecificMiddleware> logger)");
        sb.AppendLine("    {");
        sb.AppendLine("        _next = next;");
        sb.AppendLine("        _config = config;");
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public async Task InvokeAsync(HttpContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        var endpoint = context.GetEndpoint();");
        sb.AppendLine("        if (endpoint?.DisplayName is not null)");
        sb.AppendLine("        {");
        sb.AppendLine("            var endpointConfig = GetEndpointConfig(endpoint.DisplayName, context.Request.Path, context.Request.Method);");
        sb.AppendLine("            if (endpointConfig is not null)");
        sb.AppendLine("            {");
        sb.AppendLine("                await ApplyEndpointSpecificMiddleware(context, endpointConfig);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        await _next(context);");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine("    private EndpointMiddlewareConfig? GetEndpointConfig(string endpointName, PathString path, string method)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Check endpoint-specific configuration first");
        sb.AppendLine("        if (_config.Endpoints.TryGetValue(endpointName, out var endpointConfig))");
        sb.AppendLine("            return endpointConfig;");
        sb.AppendLine();
        sb.AppendLine("        // Check route-based configuration");
        sb.AppendLine("        foreach (var (pattern, config) in _config.Routes)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (MatchesRoute(path, method, pattern, config))");
        sb.AppendLine("                return config;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return null;");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine("    private static bool MatchesRoute(PathString path, string method, string pattern, RouteMiddlewareConfig config)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Check HTTP method match");
        sb.AppendLine("        if (config.HttpMethods?.Length > 0 && !config.HttpMethods.Contains(method, StringComparer.OrdinalIgnoreCase))");
        sb.AppendLine("            return false;");
        sb.AppendLine();
        sb.AppendLine("        // Simple wildcard pattern matching");
        sb.AppendLine("        if (pattern.EndsWith(\"*\"))");
        sb.AppendLine("        {");
        sb.AppendLine("            var prefix = pattern[..^1];");
        sb.AppendLine("            return path.StartsWithSegments(prefix, StringComparison.OrdinalIgnoreCase);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return path.Equals(pattern, StringComparison.OrdinalIgnoreCase);");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine("    private async Task ApplyEndpointSpecificMiddleware(HttpContext context, EndpointMiddlewareConfig config)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Apply timeout if configured");
        sb.AppendLine("        if (config.RequestTimeoutSeconds.HasValue)");
        sb.AppendLine("        {");
        sb.AppendLine("            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(config.RequestTimeoutSeconds.Value));");
        sb.AppendLine("            context.RequestAborted = cts.Token;");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // Apply caching headers if configured");
        sb.AppendLine("        if (config.EnableResponseCaching == true && config.CacheDurationSeconds.HasValue)");
        sb.AppendLine("        {");
        sb.AppendLine("            context.Response.Headers[\"Cache-Control\"] = $\"public, max-age={config.CacheDurationSeconds.Value}\";");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // Log endpoint-specific configuration application");
        sb.AppendLine("        _logger.LogDebug(\"Applied endpoint-specific middleware configuration for {Path}\", context.Request.Path);");
        sb.AppendLine();
        sb.AppendLine("        await Task.CompletedTask;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateConfigurationExtensions(StringBuilder sb, CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Extension methods for configuring Axiom middleware");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static class AxiomMiddlewareConfigurationExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure Axiom middleware pipeline from configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IApplicationBuilder UseAxiomMiddleware(");
        sb.AppendLine("        this IApplicationBuilder app,");
        sb.AppendLine("        IConfiguration configuration)");
        sb.AppendLine("    {");
        sb.AppendLine("        var config = new AxiomMiddlewareConfiguration();");
        sb.AppendLine("        configuration.GetSection(\"Axiom:Middleware\").Bind(config);");
        sb.AppendLine();
        sb.AppendLine("        return app.UseAxiomMiddleware(config);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure Axiom middleware pipeline with explicit configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IApplicationBuilder UseAxiomMiddleware(");
        sb.AppendLine("        this IApplicationBuilder app,");
        sb.AppendLine("        AxiomMiddlewareConfiguration config)");
        sb.AppendLine("    {");
        sb.AppendLine("        var logger = app.ApplicationServices.GetRequiredService<ILogger<AxiomMiddlewarePipelineBuilder>>();");
        sb.AppendLine("        var builder = new AxiomMiddlewarePipelineBuilder(app, config, logger);");
        sb.AppendLine("        return builder.Build();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Configure Axiom middleware pipeline with action configuration");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IApplicationBuilder UseAxiomMiddleware(");
        sb.AppendLine("        this IApplicationBuilder app,");
        sb.AppendLine("        Action<AxiomMiddlewareConfiguration> configure)");
        sb.AppendLine("    {");
        sb.AppendLine("        var config = new AxiomMiddlewareConfiguration();");
        sb.AppendLine("        configure(config);");
        sb.AppendLine("        return app.UseAxiomMiddleware(config);");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Add Axiom middleware services to dependency injection");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static IServiceCollection AddAxiomMiddleware(");
        sb.AppendLine("        this IServiceCollection services,");
        sb.AppendLine("        IConfiguration configuration)");
        sb.AppendLine("    {");
        sb.AppendLine("        var config = new AxiomMiddlewareConfiguration();");
        sb.AppendLine("        configuration.GetSection(\"Axiom:Middleware\").Bind(config);");
        sb.AppendLine();
        sb.AppendLine("        services.AddSingleton(config);");
        sb.AppendLine("        services.AddScoped<AxiomEndpointSpecificMiddleware>();");
        sb.AppendLine();
        sb.AppendLine("        // Configure compression if enabled");
        sb.AppendLine("        if (config.Global.EnableCompression)");
        sb.AppendLine("        {");
        sb.AppendLine("            services.AddResponseCompression();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        // Configure response caching if enabled");
        sb.AppendLine("        if (config.Global.EnableResponseCaching)");
        sb.AppendLine("        {");
        sb.AppendLine("            services.AddResponseCaching();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate stub middleware classes
        GenerateStubMiddlewareClasses(sb);
    }

    private static void GenerateStubMiddlewareClasses(StringBuilder sb)
    {
        var middlewareClasses = new[]
        {
            ("AxiomErrorHandlingMiddleware", "Global error handling and exception catching"),
            ("AxiomRequestLoggingMiddleware", "Request/response logging and correlation"),
            ("AxiomRateLimitingMiddleware", "Rate limiting and throttling"),
            ("AxiomMetricsMiddleware", "Metrics collection and performance monitoring")
        };

        foreach (var (className, description) in middlewareClasses)
        {
            sb.AppendLine($"/// <summary>");
            sb.AppendLine($"/// {description}");
            sb.AppendLine($"/// </summary>");
            sb.AppendLine($"[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
            sb.AppendLine($"public class {className}");
            sb.AppendLine("{");
            sb.AppendLine("    private readonly RequestDelegate _next;");
            sb.AppendLine($"    private readonly ILogger<{className}> _logger;");
            sb.AppendLine();
            sb.AppendLine($"    public {className}(RequestDelegate next, ILogger<{className}> logger)");
            sb.AppendLine("    {");
            sb.AppendLine("        _next = next;");
            sb.AppendLine("        _logger = logger;");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine("    public async Task InvokeAsync(HttpContext context)");
            sb.AppendLine("    {");
            sb.AppendLine($"        // TODO: Implement {description.ToLowerInvariant()} logic");
            sb.AppendLine($"        _logger.LogDebug(\"{className} processing request for {{Path}}\", context.Request.Path);");
            sb.AppendLine("        await _next(context);");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            sb.AppendLine();
        }
    }
}