using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace AxiomEndpoints.SourceGenerators;

internal static class OpenApiGenerator
{
    public static string GenerateOpenApiDocuments(
        ImmutableArray<EndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        if (endpoints.IsEmpty)
            return string.Empty;

        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using Microsoft.OpenApi.Models;");
        sb.AppendLine("using Microsoft.OpenApi.Any;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Swashbuckle.AspNetCore.SwaggerGen;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated;");
        sb.AppendLine();
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("public static partial class OpenApiDocumentGenerator");
        sb.AppendLine("{");
        sb.AppendLine("    public static OpenApiDocument Generate()");
        sb.AppendLine("    {");
        sb.AppendLine("        var document = new OpenApiDocument");
        sb.AppendLine("        {");
        sb.AppendLine("            Info = new OpenApiInfo");
        sb.AppendLine("            {");
        sb.AppendLine($"                Title = \"{compilation.AssemblyName} API\",");
        sb.AppendLine("                Version = \"v1\",");
        sb.AppendLine($"                Description = \"Auto-generated OpenAPI specification for {compilation.AssemblyName}\",");
        sb.AppendLine("            },");
        sb.AppendLine("            Paths = new OpenApiPaths(),");
        sb.AppendLine("            Components = new OpenApiComponents");
        sb.AppendLine("            {");
        sb.AppendLine("                Schemas = new Dictionary<string, OpenApiSchema>()");
        sb.AppendLine("            }");
        sb.AppendLine("        };");
        sb.AppendLine();

        // Generate paths for each endpoint
        foreach (var endpoint in endpoints.Where(e => e.Kind == EndpointKind.Unary))
        {
            GeneratePathItem(sb, endpoint);
        }

        // Generate component schemas
        GenerateComponentSchemas(sb, endpoints);

        sb.AppendLine();
        sb.AppendLine("        return document;");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Generate configuration extension method
        GenerateSwaggerConfiguration(sb, compilation);

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void GeneratePathItem(StringBuilder sb, EndpointInfo endpoint)
    {
        var path = GetOpenApiPath(endpoint);
        var method = endpoint.HttpMethod.ToLowerInvariant();

        sb.AppendLine($"        // {endpoint.TypeName}");
        sb.AppendLine($"        document.Paths.Add(\"{path}\", new OpenApiPathItem");
        sb.AppendLine("        {");
        sb.AppendLine($"            Operations = new Dictionary<OperationType, OpenApiOperation>");
        sb.AppendLine("            {");
        sb.AppendLine($"                [OperationType.{GetOperationType(endpoint.HttpMethod)}] = new OpenApiOperation");
        sb.AppendLine("                {");
        sb.AppendLine($"                    OperationId = \"{endpoint.TypeName}\",");
        sb.AppendLine($"                    Summary = \"Generated endpoint for {endpoint.TypeName}\",");
        sb.AppendLine($"                    Tags = new List<OpenApiTag> {{ new OpenApiTag {{ Name = \"{ExtractTag(endpoint.RouteType)}\" }} }},");

        // Generate parameters
        if (!string.IsNullOrEmpty(endpoint.RouteType))
        {
            GenerateParameters(sb, endpoint);
        }

        // Generate request body for POST/PUT/PATCH
        if (IsBodyMethod(endpoint.HttpMethod))
        {
            GenerateRequestBody(sb, endpoint);
        }

        // Generate responses
        GenerateResponses(sb, endpoint);

        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("        });");
        sb.AppendLine();
    }

    private static void GenerateParameters(StringBuilder sb, EndpointInfo endpoint)
    {
        sb.AppendLine("                    Parameters = new List<OpenApiParameter>(),");
        // TODO: Extract actual parameters from route type when route analysis is enhanced
    }

    private static void GenerateRequestBody(StringBuilder sb, EndpointInfo endpoint)
    {
        if (!string.IsNullOrEmpty(endpoint.RequestType))
        {
            var schemaName = GetSchemaName(endpoint.RequestType);
            sb.AppendLine("                    RequestBody = new OpenApiRequestBody");
            sb.AppendLine("                    {");
            sb.AppendLine("                        Required = true,");
            sb.AppendLine("                        Content = new Dictionary<string, OpenApiMediaType>");
            sb.AppendLine("                        {");
            sb.AppendLine("                            [\"application/json\"] = new OpenApiMediaType");
            sb.AppendLine("                            {");
            sb.AppendLine($"                                Schema = new OpenApiSchema {{ Reference = new OpenApiReference {{ Id = \"{schemaName}\", Type = ReferenceType.Schema }} }}");
            sb.AppendLine("                            }");
            sb.AppendLine("                        }");
            sb.AppendLine("                    },");
        }
    }

    private static void GenerateResponses(StringBuilder sb, EndpointInfo endpoint)
    {
        var responseSchemaName = GetSchemaName(endpoint.ResponseType);

        sb.AppendLine("                    Responses = new OpenApiResponses");
        sb.AppendLine("                    {");
        sb.AppendLine("                        [\"200\"] = new OpenApiResponse");
        sb.AppendLine("                        {");
        sb.AppendLine("                            Description = \"Success\",");
        sb.AppendLine("                            Content = new Dictionary<string, OpenApiMediaType>");
        sb.AppendLine("                            {");
        sb.AppendLine("                                [\"application/json\"] = new OpenApiMediaType");
        sb.AppendLine("                                {");
        sb.AppendLine($"                                    Schema = new OpenApiSchema {{ Reference = new OpenApiReference {{ Id = \"{responseSchemaName}\", Type = ReferenceType.Schema }} }}");
        sb.AppendLine("                                }");
        sb.AppendLine("                            }");
        sb.AppendLine("                        },");
        sb.AppendLine("                        [\"400\"] = new OpenApiResponse { Description = \"Bad Request\" },");
        sb.AppendLine("                        [\"401\"] = new OpenApiResponse { Description = \"Unauthorized\" },");
        sb.AppendLine("                        [\"404\"] = new OpenApiResponse { Description = \"Not Found\" },");
        sb.AppendLine("                        [\"500\"] = new OpenApiResponse { Description = \"Internal Server Error\" }");
        sb.AppendLine("                    },");
    }

    private static void GenerateComponentSchemas(StringBuilder sb, ImmutableArray<EndpointInfo> endpoints)
    {
        var schemaTypes = endpoints
            .SelectMany(e => new[] { e.RequestType, e.ResponseType })
            .Where(t => !string.IsNullOrEmpty(t) && !IsBuiltInType(t))
            .Distinct()
            .ToArray();

        if (schemaTypes.Length == 0)
            return;

        sb.AppendLine("        // Generate component schemas");
        foreach (var schemaType in schemaTypes)
        {
            var schemaName = GetSchemaName(schemaType);
            sb.AppendLine($"        document.Components.Schemas.Add(\"{schemaName}\", new OpenApiSchema");
            sb.AppendLine("        {");
            sb.AppendLine("            Type = \"object\",");
            sb.AppendLine($"            Title = \"{schemaName}\",");
            sb.AppendLine("            Properties = new Dictionary<string, OpenApiSchema>(),");
            sb.AppendLine("            AdditionalPropertiesAllowed = false");
            sb.AppendLine("        });");
        }
    }

    private static void GenerateSwaggerConfiguration(StringBuilder sb, CompilationInfo compilation)
    {
        sb.AppendLine("    public static void ConfigureSwaggerGen(SwaggerGenOptions options)");
        sb.AppendLine("    {");
        sb.AppendLine("        options.SwaggerDoc(\"v1\", new OpenApiInfo");
        sb.AppendLine("        {");
        sb.AppendLine($"            Title = \"{compilation.AssemblyName} API\",");
        sb.AppendLine("            Version = \"v1\",");
        sb.AppendLine($"            Description = \"Auto-generated OpenAPI specification for {compilation.AssemblyName}\"");
        sb.AppendLine("        });");
        sb.AppendLine();
        sb.AppendLine("        // Add custom operation filters");
        sb.AppendLine("        options.OperationFilter<AxiomEndpointsOperationFilter>();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private class AxiomEndpointsOperationFilter : IOperationFilter");
        sb.AppendLine("    {");
        sb.AppendLine("        public void Apply(OpenApiOperation operation, OperationFilterContext context)");
        sb.AppendLine("        {");
        sb.AppendLine("            // Add custom tags and metadata for AxiomEndpoints");
        sb.AppendLine("            operation.Extensions.Add(\"x-axiom-generated\", new OpenApiBoolean(true));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
    }

    private static string GetOpenApiPath(EndpointInfo endpoint)
    {
        // Simplified path generation - in real implementation, this would parse the route template
        return $"/api/{endpoint.TypeName.ToLowerInvariant().Replace("endpoint", "")}";
    }

    private static string GetOperationType(string httpMethod)
    {
        return httpMethod.ToUpperInvariant() switch
        {
            "GET" => "Get",
            "POST" => "Post",
            "PUT" => "Put",
            "DELETE" => "Delete",
            "PATCH" => "Patch",
            _ => "Get"
        };
    }

    private static string ExtractTag(string routeType)
    {
        if (string.IsNullOrEmpty(routeType))
            return "Default";

        var parts = routeType.Split('.');
        return parts.Length > 1 ? parts[parts.Length - 2] : parts[0];
    }

    private static bool IsBodyMethod(string httpMethod)
    {
        return httpMethod.ToUpperInvariant() switch
        {
            "POST" or "PUT" or "PATCH" => true,
            _ => false
        };
    }

    private static string GetSchemaName(string typeName)
    {
        // Extract just the type name without namespace
        var parts = typeName.Split('.');
        return parts[parts.Length - 1];
    }

    private static bool IsBuiltInType(string typeName)
    {
        return typeName switch
        {
            "string" or "int" or "long" or "bool" or "double" or "float" or "decimal" or "DateTime" or "Guid" => true,
            _ when typeName.StartsWith("System.") => true,
            _ when typeName.Contains("TRequest") || typeName.Contains("TResponse") => true,
            _ => false
        };
    }
}