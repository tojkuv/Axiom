syntax = "proto3";

package task.v1;

import "google/protobuf/timestamp.proto";
import "axiom_options.proto";

option (axiom.swift_package_name) = "TaskManager";

service TaskService {
  option (axiom.swift_client_actor) = "TaskManager";
  
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
    option (axiom.swift_action_name) = "createNewTask";
    option (axiom.swift_state_update) = "append";
  }
  
  rpc GetTask(GetTaskRequest) returns (Task) {
    option (axiom.swift_action_name) = "fetchTask";
    option (axiom.swift_state_update) = "replace";
  }
  
  rpc UpdateTask(UpdateTaskRequest) returns (Task) {
    option (axiom.swift_action_name) = "modifyTask";
    option (axiom.swift_state_update) = "update";
  }
  
  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {
    option (axiom.swift_action_name) = "removeTask";
    option (axiom.swift_state_update) = "remove";
  }
  
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
    option (axiom.swift_action_name) = "loadAllTasks";
    option (axiom.swift_state_update) = "replace_all";
  }
  
  rpc SearchTasks(SearchTasksRequest) returns (SearchTasksResponse) {
    option (axiom.swift_action_name) = "searchTasks";
    option (axiom.swift_state_update) = "filter";
  }
}

message CreateTaskRequest {
  string title = 1 [(axiom.swift_validation) = "required,min_length:1"];
  string description = 2;
  Priority priority = 3;
  string category_id = 4;
  google.protobuf.Timestamp due_date = 5;
  repeated string tags = 6;
}

message CreateTaskResponse {
  Task task = 1;
  string message = 2;
}

message GetTaskRequest {
  string id = 1 [(axiom.swift_validation) = "required,uuid"];
}

message UpdateTaskRequest {
  string id = 1 [(axiom.swift_validation) = "required,uuid"];
  optional string title = 2;
  optional string description = 3;
  optional Priority priority = 4;
  optional bool is_completed = 5;
  optional google.protobuf.Timestamp due_date = 6;
  repeated string tags = 7;
}

message DeleteTaskRequest {
  string id = 1 [(axiom.swift_validation) = "required,uuid"];
}

message DeleteTaskResponse {
  bool success = 1;
  string message = 2;
}

message ListTasksRequest {
  int32 page_size = 1;
  string page_token = 2;
  TaskFilter filter = 3;
  TaskSort sort = 4;
}

message ListTasksResponse {
  repeated Task tasks = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message SearchTasksRequest {
  string query = 1 [(axiom.swift_validation) = "required,min_length:1"];
  TaskFilter filter = 2;
  int32 limit = 3;
}

message SearchTasksResponse {
  repeated Task tasks = 1;
  int32 total_count = 2;
  repeated string suggestions = 3;
}

message Task {
  option (axiom.swift_state_root) = true;
  
  string id = 1;
  string title = 2;
  string description = 3;
  Priority priority = 4;
  bool is_completed = 5;
  string category_id = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp due_date = 9;
  repeated string tags = 10;
  map<string, string> metadata = 11;
}

message TaskFilter {
  repeated Priority priorities = 1;
  repeated string category_ids = 2;
  optional bool is_completed = 3;
  repeated string tags = 4;
  DateRange due_date_range = 5;
  DateRange created_date_range = 6;
}

message TaskSort {
  TaskSortField field = 1;
  SortDirection direction = 2;
}

message DateRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_MEDIUM = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_CRITICAL = 4;
}

enum TaskSortField {
  TASK_SORT_FIELD_UNSPECIFIED = 0;
  TASK_SORT_FIELD_CREATED_AT = 1;
  TASK_SORT_FIELD_UPDATED_AT = 2;
  TASK_SORT_FIELD_DUE_DATE = 3;
  TASK_SORT_FIELD_PRIORITY = 4;
  TASK_SORT_FIELD_TITLE = 5;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASC = 1;
  SORT_DIRECTION_DESC = 2;
}