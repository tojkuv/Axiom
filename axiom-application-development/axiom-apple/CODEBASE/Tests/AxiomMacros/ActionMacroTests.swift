import XCTest
import AxiomTesting
@testable import AxiomMacros
@testable import AxiomCore
import SwiftSyntaxMacrosTestSupport

/// Comprehensive tests for AxiomMacros action macro functionality
final class ActionMacroTests: XCTestCase {
    
    // MARK: - Basic Macro Expansion Tests
    
    func testActionMacroOnEnum() throws {
        assertMacroExpansion(
            """
            @AxiomAction
            enum TodoAction {
                case addItem(String)
                case toggleItem(UUID)
                case deleteItem(UUID)
            }
            """,
            expandedSource: """
            enum TodoAction {
                case addItem(String)
                case toggleItem(UUID)
                case deleteItem(UUID)
            }
            
            extension TodoAction: Sendable {
                var actionId: String {
                    switch self {
                    case .addItem:
                        return "TodoAction.addItem"
                    case .toggleItem:
                        return "TodoAction.toggleItem"
                    case .deleteItem:
                        return "TodoAction.deleteItem"
                    }
                }
                
                var description: String {
                    return "Action: \\(actionId)"
                }
                
                var triggersSave: Bool {
                    return true
                }
                
                func validate() throws {
                    // Validation implementation generated by macro
                }
                
                func validateParameters() throws {
                    // Parameter validation implementation generated by macro
                }
                
                var isValid: Bool {
                    do {
                        try validate()
                        try validateParameters()
                        return true
                    } catch {
                        return false
                    }
                }
                
                func trackExecution() {
                    // Performance tracking implementation generated by macro
                }
            }
            """,
            macros: ["AxiomAction": ActionMacro.self]
        )
    }
    
    func testActionMacroOnStruct() throws {
        assertMacroExpansion(
            """
            @AxiomAction
            struct UserAction {
                let type: String
                let payload: [String: Any]
            }
            """,
            expandedSource: """
            struct UserAction {
                let type: String
                let payload: [String: Any]
            }
            
            extension UserAction: Sendable {
                var actionId: String {
                    return "UserAction"
                }
                
                var description: String {
                    return "Action: \\(actionId)"
                }
                
                var triggersSave: Bool {
                    return true
                }
                
                func validate() throws {
                    // Validation implementation generated by macro
                }
                
                func validateParameters() throws {
                    // Parameter validation implementation generated by macro
                }
                
                var isValid: Bool {
                    do {
                        try validate()
                        try validateParameters()
                        return true
                    } catch {
                        return false
                    }
                }
                
                func trackExecution() {
                    // Performance tracking implementation generated by macro
                }
            }
            """,
            macros: ["AxiomAction": ActionMacro.self]
        )
    }
    
    // MARK: - Parameter Testing
    
    func testActionMacroWithParameters() throws {
        assertMacroExpansion(
            """
            @AxiomAction(validation: false, performance: true, retry: true, timeout: 5.0, priority: "high")
            enum NetworkAction {
                case fetchData
                case uploadFile
            }
            """,
            expandedSource: """
            enum NetworkAction {
                case fetchData
                case uploadFile
            }
            
            extension NetworkAction: Sendable {
                var actionId: String {
                    switch self {
                    case .fetchData:
                        return "NetworkAction.fetchData"
                    case .uploadFile:
                        return "NetworkAction.uploadFile"
                    }
                }
                
                var description: String {
                    return "Action: \\(actionId)"
                }
                
                var triggersSave: Bool {
                    return true
                }
                
                func validate() throws {
                    // Validation disabled by macro parameter
                }
                
                func validateParameters() throws {
                    // Parameter validation disabled by macro parameter
                }
                
                var isValid: Bool {
                    return true
                }
                
                func trackExecution() {
                    // Performance tracking enabled by macro parameter
                }
            }
            """,
            macros: ["AxiomAction": ActionMacro.self]
        )
    }
    
    // MARK: - Error Handling Tests
    
    func testActionMacroErrorOnClass() throws {
        XCTAssertThrowsError(
            try ActionMacro.expansion(
                of: AttributeSyntax(
                    attributeName: IdentifierTypeSyntax(name: .identifier("AxiomAction"))
                ),
                attachedTo: ClassDeclSyntax(
                    name: .identifier("TestClass"),
                    memberBlock: MemberBlockSyntax(members: MemberBlockItemListSyntax([]))
                ),
                providingExtensionsOf: IdentifierTypeSyntax(name: .identifier("TestClass")),
                conformingTo: [],
                in: TestMacroExpansionContext()
            )
        ) { error in
            XCTAssertTrue(error is ActionMacroError)
        }
    }
    
    func testActionMacroErrorOnProtocol() throws {
        XCTAssertThrowsError(
            try ActionMacro.expansion(
                of: AttributeSyntax(
                    attributeName: IdentifierTypeSyntax(name: .identifier("AxiomAction"))
                ),
                attachedTo: ProtocolDeclSyntax(
                    name: .identifier("TestProtocol"),
                    memberBlock: MemberBlockSyntax(members: MemberBlockItemListSyntax([]))
                ),
                providingExtensionsOf: IdentifierTypeSyntax(name: .identifier("TestProtocol")),
                conformingTo: [],
                in: TestMacroExpansionContext()
            )
        ) { error in
            XCTAssertTrue(error is ActionMacroError)
        }
    }
    
    // MARK: - Performance Testing
    
    func testActionMacroPerformance() throws {
        let iterations = 100
        let expectation = self.expectation(description: "Macro expansion performance")
        
        DispatchQueue.global(qos: .userInitiated).async {
            let startTime = CFAbsoluteTimeGetCurrent()
            
            for _ in 0..<iterations {
                _ = try? ActionMacro.expansion(
                    of: AttributeSyntax(
                        attributeName: IdentifierTypeSyntax(name: .identifier("AxiomAction"))
                    ),
                    attachedTo: EnumDeclSyntax(
                        name: .identifier("TestAction"),
                        memberBlock: MemberBlockSyntax(members: MemberBlockItemListSyntax([]))
                    ),
                    providingExtensionsOf: IdentifierTypeSyntax(name: .identifier("TestAction")),
                    conformingTo: [],
                    in: TestMacroExpansionContext()
                )
            }
            
            let endTime = CFAbsoluteTimeGetCurrent()
            let averageTime = (endTime - startTime) / Double(iterations)
            
            XCTAssertLessThan(averageTime, 0.001, "Macro expansion should be fast (< 1ms per expansion)")
            
            expectation.fulfill()
        }
        
        wait(for: [expectation], timeout: 10.0)
    }
    
    // MARK: - Edge Cases
    
    func testActionMacroWithEmptyEnum() throws {
        assertMacroExpansion(
            """
            @AxiomAction
            enum EmptyAction {
            }
            """,
            expandedSource: """
            enum EmptyAction {
            }
            
            extension EmptyAction: Sendable {
                var actionId: String {
                    return "EmptyAction"
                }
                
                var description: String {
                    return "Action: \\(actionId)"
                }
                
                var triggersSave: Bool {
                    return true
                }
                
                func validate() throws {
                    // Validation implementation generated by macro
                }
                
                func validateParameters() throws {
                    // Parameter validation implementation generated by macro
                }
                
                var isValid: Bool {
                    do {
                        try validate()
                        try validateParameters()
                        return true
                    } catch {
                        return false
                    }
                }
                
                func trackExecution() {
                    // Performance tracking implementation generated by macro
                }
            }
            """,
            macros: ["AxiomAction": ActionMacro.self]
        )
    }
    
    func testActionMacroWithComplexParameters() throws {
        assertMacroExpansion(
            """
            @AxiomAction
            enum ComplexAction {
                case complexOperation(
                    data: [String: Any],
                    options: Set<String>,
                    completion: @escaping (Result<String, Error>) -> Void
                )
            }
            """,
            expandedSource: """
            enum ComplexAction {
                case complexOperation(
                    data: [String: Any],
                    options: Set<String>,
                    completion: @escaping (Result<String, Error>) -> Void
                )
            }
            
            extension ComplexAction: Sendable {
                var actionId: String {
                    switch self {
                    case .complexOperation:
                        return "ComplexAction.complexOperation"
                    }
                }
                
                var description: String {
                    return "Action: \\(actionId)"
                }
                
                var triggersSave: Bool {
                    return true
                }
                
                func validate() throws {
                    // Validation implementation generated by macro
                }
                
                func validateParameters() throws {
                    // Parameter validation implementation generated by macro
                }
                
                var isValid: Bool {
                    do {
                        try validate()
                        try validateParameters()
                        return true
                    } catch {
                        return false
                    }
                }
                
                func trackExecution() {
                    // Performance tracking implementation generated by macro
                }
            }
            """,
            macros: ["AxiomAction": ActionMacro.self]
        )
    }
}

// MARK: - Test Helper

/// Test macro expansion context for unit testing
class TestMacroExpansionContext: MacroExpansionContext {
    func makeUniqueName(_ name: String) -> TokenSyntax {
        return TokenSyntax(.identifier("\\(name)_\\(UUID().uuidString.prefix(8))"), presence: .present)
    }
    
    func diagnose(_ diagnostic: Diagnostic) {
        // Handle diagnostics in tests
    }
}

// MARK: - ActionMacroError for Testing

enum ActionMacroError: Error, LocalizedError {
    case mustBeAppliedToEnumOrStruct
    case invalidParameter(String)
    case missingRequiredParameter(String)
    
    var errorDescription: String? {
        switch self {
        case .mustBeAppliedToEnumOrStruct:
            return "ActionMacro can only be applied to enum or struct declarations"
        case .invalidParameter(let param):
            return "Invalid parameter: \\(param)"
        case .missingRequiredParameter(let param):
            return "Missing required parameter: \\(param)"
        }
    }
}