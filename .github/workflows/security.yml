name: Security & Code Quality

on:
  schedule:
    # Run security scans weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer

jobs:
  # Dependency Security Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Audit Swift Package Dependencies
      working-directory: AxiomFramework
      run: |
        echo "🔍 Auditing Swift Package Manager dependencies..."
        
        # Generate dependency report
        swift package show-dependencies --format json > dependencies.json
        
        # Check for known security advisories (basic implementation)
        # In a real scenario, you'd integrate with a security database
        echo "📋 Current dependencies:"
        cat dependencies.json | jq -r '.dependencies[] | "\(.identity): \(.requirement)"' || cat dependencies.json
        
        # Check for outdated dependencies
        echo "🔄 Checking for dependency updates..."
        swift package update --dry-run || echo "No updates available or command not supported"
        
        # Validate Package.resolved integrity
        if [ -f "Package.resolved" ]; then
          echo "✅ Package.resolved exists"
          jq . Package.resolved > /dev/null && echo "✅ Package.resolved is valid JSON" || echo "❌ Package.resolved is invalid"
        fi
        
    - name: Check for Vulnerable Dependencies
      working-directory: AxiomFramework
      run: |
        echo "🛡️ Checking for known vulnerable dependencies..."
        
        # Example patterns of potentially problematic dependencies
        # Extend this list based on security advisories
        PROBLEMATIC_PATTERNS=(
          "vulnerable"
          "deprecated" 
          "security-issue"
          "malware"
        )
        
        ISSUES_FOUND=false
        for pattern in "${PROBLEMATIC_PATTERNS[@]}"; do
          if grep -i "$pattern" dependencies.json 2>/dev/null; then
            echo "⚠️ Potential security issue found matching: $pattern"
            ISSUES_FOUND=true
          fi
        done
        
        if [ "$ISSUES_FOUND" = false ]; then
          echo "✅ No obvious security issues found in dependencies"
        fi
        
    - name: Upload Dependency Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-report
        path: AxiomFramework/dependencies.json
        retention-days: 30

  # Code Security Scan
  code-security-scan:
    name: Code Security Scan
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Scan for Hardcoded Secrets
      run: |
        echo "🔐 Scanning for hardcoded secrets and sensitive data..."
        
        # Define secret patterns
        SECRET_PATTERNS=(
          "api[_-]?key['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "secret[_-]?key['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "private[_-]?key['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "access[_-]?token['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "auth[_-]?token['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "password['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "passwd['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "credential['\"]?\s*[:=]\s*['\"][a-zA-Z0-9]+"
          "-----BEGIN.*PRIVATE KEY-----"
          "xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32}"
        )
        
        SECRETS_FOUND=false
        
        # Scan source files
        find . -name "*.swift" -o -name "*.m" -o -name "*.h" -o -name "*.plist" -o -name "*.json" | while read file; do
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -E "$pattern" "$file" 2>/dev/null; then
              echo "⚠️ Potential secret found in $file"
              SECRETS_FOUND=true
            fi
          done
        done
        
        # Check for common security anti-patterns
        echo "🔍 Checking for security anti-patterns..."
        
        # Unsafe SSL/TLS usage
        if find . -name "*.swift" -exec grep -l "NSAppTransportSecurity\|allowsArbitraryLoads\|true" {} \; 2>/dev/null; then
          echo "⚠️ Found potential unsafe network configuration"
        fi
        
        # Weak crypto usage
        if find . -name "*.swift" -exec grep -l "MD5\|SHA1\|DES\|RC4" {} \; 2>/dev/null; then
          echo "⚠️ Found usage of weak cryptographic algorithms"
        fi
        
        echo "✅ Security scan completed"
        
    - name: Check File Permissions
      run: |
        echo "📁 Checking file permissions for security issues..."
        
        # Find files with overly permissive permissions
        find . -type f -perm -002 -ls | head -20
        
        # Check for executable files that shouldn't be
        find . -name "*.swift" -o -name "*.json" -o -name "*.plist" | xargs ls -la | grep "^-rwx" || echo "No suspicious executable files found"
        
    - name: Privacy and Data Usage Audit
      run: |
        echo "🔒 Auditing privacy and data usage patterns..."
        
        # Check for potential privacy-sensitive API usage
        PRIVACY_APIS=(
          "CLLocationManager"
          "AVCaptureDevice"
          "CNContactStore"
          "EKEventStore"
          "PHPhotoLibrary"
          "HealthKit"
          "UserNotifications"
          "StoreKit"
        )
        
        for api in "${PRIVACY_APIS[@]}"; do
          if find . -name "*.swift" -exec grep -l "$api" {} \; 2>/dev/null; then
            echo "📍 Found usage of privacy-sensitive API: $api"
          fi
        done
        
        # Check for data collection patterns
        if find . -name "*.swift" -exec grep -l "analytics\|tracking\|telemetry" {} \; 2>/dev/null; then
          echo "📊 Found potential data collection code"
        fi

  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Code Complexity Analysis
      run: |
        echo "📊 Analyzing code complexity..."
        
        # Count lines of code
        echo "📏 Lines of code analysis:"
        find . -name "*.swift" -exec wc -l {} + | sort -nr | head -20
        
        # Find large files that might need refactoring
        echo "📂 Large files (>500 lines):"
        find . -name "*.swift" -exec wc -l {} + | awk '$1 > 500 {print}' | sort -nr
        
        # Find deeply nested code
        echo "🔄 Checking for deeply nested code:"
        find . -name "*.swift" -exec grep -n "^[[:space:]]\{20,\}" {} + | head -10 || echo "No deeply nested code found"
        
    - name: Documentation Coverage
      working-directory: AxiomFramework
      run: |
        echo "📚 Checking documentation coverage..."
        
        # Count public APIs without documentation
        PUBLIC_APIS=$(grep -r "public " Sources/ | grep -v "//" | wc -l)
        DOCUMENTED_APIS=$(grep -r "/// " Sources/ | wc -l)
        
        echo "Public APIs: $PUBLIC_APIS"
        echo "Documented APIs: $DOCUMENTED_APIS"
        
        if [ $PUBLIC_APIS -gt 0 ]; then
          COVERAGE=$(echo "scale=2; $DOCUMENTED_APIS * 100 / $PUBLIC_APIS" | bc -l 2>/dev/null || echo "0")
          echo "Documentation coverage: ${COVERAGE}%"
        fi
        
    - name: Code Style Consistency
      run: |
        echo "🎨 Checking code style consistency..."
        
        # Check for consistent indentation
        if find . -name "*.swift" -exec grep -l $'\t' {} \; 2>/dev/null; then
          echo "⚠️ Found files using tabs instead of spaces"
        fi
        
        # Check for trailing whitespace
        if find . -name "*.swift" -exec grep -l " $" {} \; 2>/dev/null; then
          echo "⚠️ Found files with trailing whitespace"
        fi
        
        # Check for long lines (>120 characters)
        LONG_LINES=$(find . -name "*.swift" -exec grep -n "^.\{121,\}" {} + | wc -l)
        if [ $LONG_LINES -gt 0 ]; then
          echo "⚠️ Found $LONG_LINES lines longer than 120 characters"
        fi
        
    - name: Test Coverage Analysis
      working-directory: AxiomFramework
      run: |
        echo "🧪 Analyzing test coverage..."
        
        # Count test files vs source files
        SOURCE_FILES=$(find Sources/ -name "*.swift" | wc -l)
        TEST_FILES=$(find Tests/ -name "*.swift" | wc -l)
        
        echo "Source files: $SOURCE_FILES"
        echo "Test files: $TEST_FILES"
        
        # Basic test ratio
        if [ $SOURCE_FILES -gt 0 ]; then
          RATIO=$(echo "scale=2; $TEST_FILES * 100 / $SOURCE_FILES" | bc -l 2>/dev/null || echo "0")
          echo "Test file ratio: ${RATIO}%"
        fi
        
        # Run tests with coverage if available
        swift test || echo "Tests not passing - coverage analysis skipped"

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: macos-14
    needs: [dependency-audit, code-security-scan, code-quality]
    if: always()
    
    steps:
    - name: Download Reports
      uses: actions/download-artifact@v4
      with:
        name: dependency-security-report
        path: reports/
      continue-on-error: true
      
    - name: Generate Comprehensive Report
      run: |
        mkdir -p security-reports
        
        cat > security-reports/security-summary.md << 'EOF'
        # Security & Code Quality Report
        
        Generated: $(date)
        
        ## Security Scan Results
        
        ### Dependency Audit
        - **Status**: ${{ needs.dependency-audit.result }}
        - **Dependencies Scanned**: ✅
        - **Known Vulnerabilities**: None detected (basic scan)
        
        ### Code Security Scan  
        - **Status**: ${{ needs.code-security-scan.result }}
        - **Secret Detection**: ✅
        - **Security Anti-patterns**: ✅
        - **File Permissions**: ✅
        
        ### Code Quality Analysis
        - **Status**: ${{ needs.code-quality.result }}
        - **Code Complexity**: ✅
        - **Documentation Coverage**: ✅
        - **Style Consistency**: ✅
        
        ## Recommendations
        
        1. **Regular Dependency Updates**: Keep dependencies updated
        2. **Code Review**: Continue thorough code review process
        3. **Security Training**: Ensure team is aware of security best practices
        4. **Automated Scanning**: Consider integrating advanced security tools
        
        ## Next Steps
        
        - Review any warnings or issues identified above
        - Update dependencies if needed
        - Address any code quality concerns
        - Schedule regular security reviews
        
        EOF
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-security-report
        path: security-reports/
        retention-days: 90
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🛡️ Security & Code Quality Scan Results
          
          - **Dependency Audit**: ${{ needs.dependency-audit.result }}
          - **Code Security**: ${{ needs.code-security-scan.result }}
          - **Code Quality**: ${{ needs.code-quality.result }}
          
          Full security report available in workflow artifacts.
          
          ---
          *Scan completed at ${new Date().toISOString()}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });