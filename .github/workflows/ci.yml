name: CI

on:
  push:
    branches: [ main, framework ]
  pull_request:
    branches: [ main, framework ]

env:
  DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer

jobs:
  # Swift Package Framework Build and Test
  framework-tests:
    name: Framework Tests (${{ matrix.os }}, Swift ${{ matrix.swift-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-14]
        swift-version: ["5.9", "5.10"]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift-version }}
        
    - name: Cache Swift Package Dependencies
      uses: actions/cache@v4
      with:
        path: |
          AxiomFramework/.build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('AxiomFramework/Package.swift', 'AxiomFramework/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Resolve Dependencies
      working-directory: AxiomFramework
      run: swift package resolve
      
    - name: Build Framework
      working-directory: AxiomFramework
      run: swift build -v
      
    - name: Run Unit Tests
      working-directory: AxiomFramework
      run: swift test -v --parallel
      
    - name: Build for Release
      working-directory: AxiomFramework
      run: swift build -c release -v

  # Performance and Integration Tests
  performance-tests:
    name: Performance Tests
    runs-on: macos-14
    needs: framework-tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Cache Swift Package Dependencies
      uses: actions/cache@v4
      with:
        path: |
          AxiomFramework/.build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('AxiomFramework/Package.swift', 'AxiomFramework/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Run Performance Benchmark Suite
      working-directory: AxiomFramework
      run: swift test --filter PerformanceBenchmarkSuite
      continue-on-error: true
      
    - name: Run Integration Tests
      working-directory: AxiomFramework
      run: swift test --filter IntegrationTests
      continue-on-error: true

  # iOS Example App Build
  example-app-ios:
    name: iOS Example App
    runs-on: macos-14
    needs: framework-tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
      
    - name: Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          AxiomExampleApp/ExampleApp.xcodeproj/project.xcworkspace/xcuserdata
        key: ${{ runner.os }}-xcode-${{ hashFiles('AxiomExampleApp/ExampleApp.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Build iOS Example App
      run: |
        xcodebuild -project AxiomExampleApp/ExampleApp.xcodeproj \
          -scheme ExampleApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -configuration Debug \
          build
          
    - name: Test iOS Example App
      run: |
        xcodebuild -project AxiomExampleApp/ExampleApp.xcodeproj \
          -scheme ExampleApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -configuration Debug \
          test
      continue-on-error: true

  # Workspace Integration Validation
  workspace-integration:
    name: Workspace Integration
    runs-on: macos-14
    needs: [framework-tests, example-app-ios]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
      
    - name: Cache Xcode DerivedData
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          Axiom.xcworkspace/xcuserdata
        key: ${{ runner.os }}-workspace-${{ hashFiles('Axiom.xcworkspace/contents.xcworkspacedata') }}
        restore-keys: |
          ${{ runner.os }}-workspace-
          
    - name: Build Workspace
      run: |
        xcodebuild -workspace Axiom.xcworkspace \
          -scheme ExampleApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -configuration Debug \
          build
          
    - name: Validate Framework Integration
      run: |
        xcodebuild -workspace Axiom.xcworkspace \
          -scheme ExampleApp \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -configuration Debug \
          test
      continue-on-error: true

  # Code Quality and Documentation
  code-quality:
    name: Code Quality & Documentation
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Cache Swift Package Dependencies
      uses: actions/cache@v4
      with:
        path: |
          AxiomFramework/.build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('AxiomFramework/Package.swift', 'AxiomFramework/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
        
    - name: Swift Format Check
      working-directory: AxiomFramework
      run: |
        if command -v swift-format &> /dev/null; then
          swift-format lint --recursive Sources/ Tests/
        else
          echo "Swift-format not available, skipping format check"
        fi
      continue-on-error: true
      
    - name: Build Documentation
      working-directory: AxiomFramework
      run: |
        swift package generate-documentation --target Axiom
      continue-on-error: true
      
    - name: Package Validation
      working-directory: AxiomFramework
      run: |
        swift package dump-package
        swift package compute-checksum
        
    - name: Macro Compilation Test
      working-directory: AxiomFramework
      run: |
        swift build --target AxiomMacros
        swift test --filter MacroTests
      continue-on-error: true

  # Security and Dependency Audit
  security-audit:
    name: Security Audit
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Dependency Security Audit
      working-directory: AxiomFramework
      run: |
        # Check for known vulnerabilities in dependencies
        swift package show-dependencies --format json > dependencies.json
        cat dependencies.json
        
        # Validate Package.swift integrity
        swift package describe --type json > package_description.json
        cat package_description.json
      continue-on-error: true
      
    - name: Upload Dependency Report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          AxiomFramework/dependencies.json
          AxiomFramework/package_description.json
        retention-days: 30

  # Deployment Readiness (Release branches)
  deployment-check:
    name: Deployment Readiness
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'
    needs: [framework-tests, example-app-ios, workspace-integration, code-quality]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: "5.9"
        
    - name: Create Release Build
      working-directory: AxiomFramework
      run: |
        swift build -c release --arch arm64 --arch x86_64
        
    - name: Archive Framework
      run: |
        mkdir -p build-artifacts
        cp -R AxiomFramework/.build/release/ build-artifacts/
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: axiom-framework-release
        path: build-artifacts/
        retention-days: 90

# Workflow Summary
  status-check:
    name: Status Check
    runs-on: macos-14
    needs: [framework-tests, performance-tests, example-app-ios, workspace-integration, code-quality, security-audit]
    if: always()
    
    steps:
    - name: Report Status
      run: |
        echo "üéØ CI Pipeline Status Summary:"
        echo "Framework Tests: ${{ needs.framework-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "iOS Example App: ${{ needs.example-app-ios.result }}"
        echo "Workspace Integration: ${{ needs.workspace-integration.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        
        if [[ "${{ needs.framework-tests.result }}" == "success" ]]; then
          echo "‚úÖ Core framework validation passed"
        else
          echo "‚ùå Core framework validation failed"
          exit 1
        fi