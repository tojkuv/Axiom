using System;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;

namespace AxiomEndpoints.SourceGenerators;

internal static class GrpcServiceGenerator
{
    public static string GenerateGrpcServices(
        ImmutableArray<EndpointInfo> endpoints,
        ImmutableArray<StreamingEndpointInfo> streamingEndpoints,
        CompilationInfo compilation)
    {
        var sb = new StringBuilder();

        // Generate header
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System.Runtime.CompilerServices;");
        sb.AppendLine("using Grpc.Core;");
        sb.AppendLine("using Microsoft.Extensions.Logging;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.AspNetCore.Builder;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine("using AxiomEndpoints.Core.Streaming;");
        sb.AppendLine("using AxiomEndpoints.Grpc;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated.Grpc;");
        sb.AppendLine();

        // Group endpoints by service
        var allEndpoints = endpoints
            .Where(e => ShouldIncludeInGrpc(e))
            .Select(e => new ServiceEndpointInfo
            {
                ServiceName = GetServiceName(e),
                MethodName = e.TypeName,
                EndpointType = $"{e.Namespace}.{e.TypeName}",
                RequestType = e.RequestType,
                ResponseType = e.ResponseType,
                StreamingMode = StreamingMode.Unary
            })
            .Concat(streamingEndpoints.Select(s => new ServiceEndpointInfo
            {
                ServiceName = GetServiceName(s),
                MethodName = s.TypeName,
                EndpointType = $"{s.Namespace}.{s.TypeName}",
                RequestType = s.RequestType,
                ResponseType = s.ResponseType,
                StreamingMode = s.Mode
            }))
            .GroupBy(e => e.ServiceName)
            .ToList();

        foreach (var service in allEndpoints)
        {
            GenerateServiceImplementation(sb, service.Key, service.ToList(), compilation);
        }

        // Generate service registration helper
        GenerateServiceRegistration(sb, allEndpoints.Select(s => s.Key).ToList(), compilation);

        return sb.ToString();
    }

    private static void GenerateServiceImplementation(
        StringBuilder sb,
        string serviceName,
        System.Collections.Generic.List<ServiceEndpointInfo> endpoints,
        CompilationInfo compilation)
    {
        sb.AppendLine($"/// <summary>");
        sb.AppendLine($"/// Generated gRPC service implementation for {serviceName}");
        sb.AppendLine($"/// </summary>");
        sb.AppendLine($"public class {serviceName}Implementation : {serviceName}.{serviceName}Base");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly IServiceProvider _services;");
        sb.AppendLine($"    private readonly ILogger<{serviceName}Implementation> _logger;");
        sb.AppendLine();
        sb.AppendLine($"    public {serviceName}Implementation(");
        sb.AppendLine("        IServiceProvider services,");
        sb.AppendLine($"        ILogger<{serviceName}Implementation> logger)");
        sb.AppendLine("    {");
        sb.AppendLine("        _services = services;");
        sb.AppendLine("        _logger = logger;");
        sb.AppendLine("    }");
        sb.AppendLine();

        foreach (var endpoint in endpoints)
        {
            GenerateServiceMethod(sb, endpoint);
        }

        sb.AppendLine("}");
        sb.AppendLine();
    }

    private static void GenerateServiceMethod(StringBuilder sb, ServiceEndpointInfo endpoint)
    {
        switch (endpoint.StreamingMode)
        {
            case StreamingMode.Unary:
                GenerateUnaryMethod(sb, endpoint);
                break;
            case StreamingMode.ServerStream:
                GenerateServerStreamMethod(sb, endpoint);
                break;
            case StreamingMode.ClientStream:
                GenerateClientStreamMethod(sb, endpoint);
                break;
            case StreamingMode.Bidirectional:
                GenerateBidirectionalMethod(sb, endpoint);
                break;
        }
    }

    private static void GenerateUnaryMethod(StringBuilder sb, ServiceEndpointInfo endpoint)
    {
        var requestType = GetProtoTypeName(endpoint.RequestType);
        var responseType = GetProtoTypeName(endpoint.ResponseType);

        sb.AppendLine($"    public override async Task<{responseType}> {endpoint.MethodName}(");
        sb.AppendLine($"        {requestType} request,");
        sb.AppendLine($"        ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = _services.GetRequiredService<{endpoint.EndpointType}>();");
        sb.AppendLine("            var contextFactory = _services.GetRequiredService<IContextFactory>();");
        sb.AppendLine("            var axiomContext = contextFactory.CreateContext();");
        sb.AppendLine();
        sb.AppendLine("            var result = await endpoint.HandleAsync(request, axiomContext);");
        sb.AppendLine();
        sb.AppendLine("            return result.Match(");
        sb.AppendLine("                success: value => value,");
        sb.AppendLine("                failure: error => throw MapErrorToRpcException(error));");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (RpcException)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw;");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine($"            _logger.LogError(ex, \"Error in {endpoint.MethodName}\");");
        sb.AppendLine("            throw new RpcException(new Status(StatusCode.Internal, \"Internal server error\"));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateServerStreamMethod(StringBuilder sb, ServiceEndpointInfo endpoint)
    {
        var requestType = GetProtoTypeName(endpoint.RequestType);
        var responseType = GetProtoTypeName(endpoint.ResponseType);

        sb.AppendLine($"    public override async Task {endpoint.MethodName}(");
        sb.AppendLine($"        {requestType} request,");
        sb.AppendLine($"        IServerStreamWriter<{responseType}> responseStream,");
        sb.AppendLine($"        ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = _services.GetRequiredService<{endpoint.EndpointType}>();");
        sb.AppendLine("            var contextFactory = _services.GetRequiredService<IContextFactory>();");
        sb.AppendLine("            var axiomContext = contextFactory.CreateContext();");
        sb.AppendLine();
        sb.AppendLine("            await foreach (var item in endpoint.StreamAsync(request, axiomContext)");
        sb.AppendLine("                .WithCancellation(context.CancellationToken))");
        sb.AppendLine("            {");
        sb.AppendLine("                await responseStream.WriteAsync(item);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (OperationCanceledException) when (context.CancellationToken.IsCancellationRequested)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw new RpcException(Status.DefaultCancelled);");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine($"            _logger.LogError(ex, \"Error in {endpoint.MethodName}\");");
        sb.AppendLine("            throw new RpcException(new Status(StatusCode.Internal, \"Internal server error\"));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateClientStreamMethod(StringBuilder sb, ServiceEndpointInfo endpoint)
    {
        var requestType = GetProtoTypeName(endpoint.RequestType);
        var responseType = GetProtoTypeName(endpoint.ResponseType);

        sb.AppendLine($"    public override async Task<{responseType}> {endpoint.MethodName}(");
        sb.AppendLine($"        IAsyncStreamReader<{requestType}> requestStream,");
        sb.AppendLine($"        ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = _services.GetRequiredService<{endpoint.EndpointType}>();");
        sb.AppendLine("            var contextFactory = _services.GetRequiredService<IContextFactory>();");
        sb.AppendLine("            var axiomContext = contextFactory.CreateContext();");
        sb.AppendLine();
        sb.AppendLine("            var requests = ReadAllAsync(requestStream, context.CancellationToken);");
        sb.AppendLine("            var result = await endpoint.HandleAsync(requests, axiomContext);");
        sb.AppendLine();
        sb.AppendLine("            return result.Match(");
        sb.AppendLine("                success: value => value,");
        sb.AppendLine("                failure: error => throw MapErrorToRpcException(error));");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (RpcException)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw;");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine($"            _logger.LogError(ex, \"Error in {endpoint.MethodName}\");");
        sb.AppendLine("            throw new RpcException(new Status(StatusCode.Internal, \"Internal server error\"));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateBidirectionalMethod(StringBuilder sb, ServiceEndpointInfo endpoint)
    {
        var requestType = GetProtoTypeName(endpoint.RequestType);
        var responseType = GetProtoTypeName(endpoint.ResponseType);

        sb.AppendLine($"    public override async Task {endpoint.MethodName}(");
        sb.AppendLine($"        IAsyncStreamReader<{requestType}> requestStream,");
        sb.AppendLine($"        IServerStreamWriter<{responseType}> responseStream,");
        sb.AppendLine($"        ServerCallContext context)");
        sb.AppendLine("    {");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = _services.GetRequiredService<{endpoint.EndpointType}>();");
        sb.AppendLine("            var contextFactory = _services.GetRequiredService<IContextFactory>();");
        sb.AppendLine("            var axiomContext = contextFactory.CreateContext();");
        sb.AppendLine();
        sb.AppendLine("            var requests = ReadAllAsync(requestStream, context.CancellationToken);");
        sb.AppendLine("            var responses = endpoint.StreamAsync(requests, axiomContext);");
        sb.AppendLine();
        sb.AppendLine("            await foreach (var response in responses.WithCancellation(context.CancellationToken))");
        sb.AppendLine("            {");
        sb.AppendLine("                await responseStream.WriteAsync(response);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (OperationCanceledException) when (context.CancellationToken.IsCancellationRequested)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw new RpcException(Status.DefaultCancelled);");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine($"            _logger.LogError(ex, \"Error in {endpoint.MethodName}\");");
        sb.AppendLine("            throw new RpcException(new Status(StatusCode.Internal, \"Internal server error\"));");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void GenerateServiceRegistration(
        StringBuilder sb,
        System.Collections.Generic.List<string> serviceNames,
        CompilationInfo compilation)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Helper class for registering generated gRPC services");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class ServiceRegistration");
        sb.AppendLine("{");
        sb.AppendLine("    public static void MapGrpcServices(this WebApplication app)");
        sb.AppendLine("    {");

        foreach (var serviceName in serviceNames)
        {
            sb.AppendLine($"        app.MapGrpcService<{serviceName}Implementation>();");
        }

        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static IServiceCollection AddGeneratedGrpcServices(this IServiceCollection services)");
        sb.AppendLine("    {");

        foreach (var serviceName in serviceNames)
        {
            sb.AppendLine($"        services.AddScoped<{serviceName}Implementation>();");
        }

        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Add helper methods
        GenerateHelperMethods(sb);
    }

    private static void GenerateHelperMethods(StringBuilder sb)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Helper methods for gRPC service implementations");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("internal static class GrpcHelpers");
        sb.AppendLine("{");
        sb.AppendLine("    public static async IAsyncEnumerable<T> ReadAllAsync<T>(");
        sb.AppendLine("        IAsyncStreamReader<T> reader,");
        sb.AppendLine("        [EnumeratorCancellation] CancellationToken cancellationToken = default)");
        sb.AppendLine("    {");
        sb.AppendLine("        await foreach (var item in reader.ReadAllAsync(cancellationToken))");
        sb.AppendLine("        {");
        sb.AppendLine("            yield return item;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static RpcException MapErrorToRpcException(Error error)");
        sb.AppendLine("    {");
        sb.AppendLine("        var statusCode = error.Type switch");
        sb.AppendLine("        {");
        sb.AppendLine("            ErrorType.NotFound => StatusCode.NotFound,");
        sb.AppendLine("            ErrorType.Validation => StatusCode.InvalidArgument,");
        sb.AppendLine("            ErrorType.Unauthorized => StatusCode.Unauthenticated,");
        sb.AppendLine("            ErrorType.Forbidden => StatusCode.PermissionDenied,");
        sb.AppendLine("            ErrorType.Conflict => StatusCode.AlreadyExists,");
        sb.AppendLine("            ErrorType.TooManyRequests => StatusCode.ResourceExhausted,");
        sb.AppendLine("            _ => StatusCode.Internal");
        sb.AppendLine("        };");
        sb.AppendLine();
        sb.AppendLine("        return new RpcException(new Status(statusCode, error.Message));");
        sb.AppendLine("    }");
        sb.AppendLine("}");
    }

    private static string GetServiceName(EndpointInfo endpoint)
    {
        var parts = endpoint.Namespace.Split('.');
        var serviceName = parts.Length > 1 ? parts[parts.Length - 1] : "DefaultService";
        
        if (!serviceName.EndsWith("Service", StringComparison.OrdinalIgnoreCase))
        {
            serviceName += "Service";
        }

        return serviceName;
    }

    private static string GetServiceName(StreamingEndpointInfo endpoint)
    {
        var parts = endpoint.Namespace.Split('.');
        var serviceName = parts.Length > 1 ? parts[parts.Length - 1] : "DefaultService";
        
        if (!serviceName.EndsWith("Service", StringComparison.OrdinalIgnoreCase))
        {
            serviceName += "Service";
        }

        return serviceName;
    }

    private static string GetProtoTypeName(string csharpType)
    {
        var typeName = csharpType.Split('.').Last().Split('<').First();
        return typeName;
    }

    private static bool ShouldIncludeInGrpc(EndpointInfo endpoint)
    {
        return true;
    }
}

internal class ServiceEndpointInfo
{
    public string ServiceName { get; set; } = string.Empty;
    public string MethodName { get; set; } = string.Empty;
    public string EndpointType { get; set; } = string.Empty;
    public string RequestType { get; set; } = string.Empty;
    public string ResponseType { get; set; } = string.Empty;
    public StreamingMode StreamingMode { get; set; }
}