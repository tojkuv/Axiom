using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace AxiomEndpoints.SourceGenerators;

internal static class EndpointRegistrationGenerator
{
    public static string GenerateEndpointRegistrations(
        ImmutableArray<EndpointInfo> endpoints,
        string routeTemplatesCode,
        CompilationInfo compilation)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Net.Http;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.AspNetCore.Builder;");
        sb.AppendLine("using Microsoft.AspNetCore.Http;");
        sb.AppendLine("using Microsoft.AspNetCore.Routing;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
        sb.AppendLine("using AxiomEndpoints.Core;");
        sb.AppendLine("using AxiomEndpoints.Core.Streaming;");
        sb.AppendLine("using AxiomEndpoints.AspNetCore.Streaming;");
        sb.AppendLine("using System.Text.Json;");
        sb.AppendLine();
        sb.AppendLine($"namespace {compilation.RootNamespace}.Generated;");
        sb.AppendLine();
        sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"AxiomEndpoints.SourceGenerators\", \"1.0.0\")]");
        sb.AppendLine("internal static partial class EndpointRegistration");
        sb.AppendLine("{");
        sb.AppendLine("    public static void RegisterEndpoints(IServiceCollection services)");
        sb.AppendLine("    {");

        foreach (var endpoint in endpoints)
        {
            sb.AppendLine($"        services.AddScoped<{endpoint.Namespace}.{endpoint.TypeName}>();");
        }

        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static void MapEndpoints(WebApplication app)");
        sb.AppendLine("    {");

        foreach (var endpoint in endpoints)
        {
            GenerateEndpointMapping(sb, endpoint);
        }

        sb.AppendLine("    }");

        // Generate individual mapping methods for unary endpoints only
        foreach (var endpoint in endpoints.Where(e => e.Kind == EndpointKind.Unary))
        {
            GenerateMappingMethod(sb, endpoint);
        }

        // Generate helper methods for streaming
        GenerateStreamingHelperMethods(sb);

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static void GenerateEndpointMapping(StringBuilder sb, EndpointInfo endpoint)
    {
        var template = string.IsNullOrEmpty(endpoint.RouteType) 
            ? $"\"/api/{endpoint.TypeName.ToLowerInvariant()}\""
            : $"RouteTemplates.GetTemplate<{endpoint.RouteType}>()";

        switch (endpoint.Kind)
        {
            case EndpointKind.ServerStream:
                GenerateServerStreamMapping(sb, endpoint, template);
                break;
            case EndpointKind.ClientStream:
                GenerateClientStreamMapping(sb, endpoint, template);
                break;
            case EndpointKind.BidirectionalStream:
                GenerateBidirectionalMapping(sb, endpoint, template);
                break;
            default:
                GenerateUnaryMapping(sb, endpoint, template);
                break;
        }
    }

    private static void GenerateUnaryMapping(StringBuilder sb, EndpointInfo endpoint, string template)
    {
        var method = endpoint.HttpMethod.ToUpperInvariant();

        sb.AppendLine($"        app.Map{method}({template}, Handle{endpoint.TypeName})");

        if (endpoint.RequiresAuthorization)
        {
            sb.AppendLine($"            .RequireAuthorization()");
        }

        sb.AppendLine($"            .WithName(\"{endpoint.TypeName}\")");
        sb.AppendLine($"            .WithTags(\"{ExtractTag(endpoint.RouteType)}\");");
        sb.AppendLine();
    }

    private static void GenerateServerStreamMapping(StringBuilder sb, EndpointInfo endpoint, string template)
    {
        sb.AppendLine($"        app.MapGet({template}, async (HttpContext httpContext) =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = httpContext.RequestServices.GetRequiredService<{endpoint.Namespace}.{endpoint.TypeName}>();");
        sb.AppendLine("            var context = httpContext.RequestServices.GetRequiredService<IContext>();");
        sb.AppendLine();
        sb.AppendLine($"            var request = BindRequest<{endpoint.RequestType}>(httpContext);");
        sb.AppendLine();
        sb.AppendLine("            if (httpContext.Request.Headers.Accept.Contains(\"text/event-stream\"))");
        sb.AppendLine("            {");
        sb.AppendLine("                await ServerSentEventsHandler.HandleSseAsync(httpContext, endpoint, request, context);");
        sb.AppendLine("            }");
        sb.AppendLine("            else");
        sb.AppendLine("            {");
        sb.AppendLine("                var items = await endpoint.StreamAsync(request, context)");
        sb.AppendLine("                    .Take(100)");
        sb.AppendLine("                    .ToListAsync(httpContext.RequestAborted);");
        sb.AppendLine("                return Results.Ok(items);");
        sb.AppendLine("            }");
        sb.AppendLine("        })");
        sb.AppendLine($"        .WithName(\"{endpoint.TypeName}\")");
        sb.AppendLine("        .WithTags(\"Streaming\");");
        sb.AppendLine();
    }

    private static void GenerateClientStreamMapping(StringBuilder sb, EndpointInfo endpoint, string template)
    {
        sb.AppendLine($"        app.MapPost({template}, async (HttpContext httpContext) =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = httpContext.RequestServices.GetRequiredService<{endpoint.Namespace}.{endpoint.TypeName}>();");
        sb.AppendLine("            var context = httpContext.RequestServices.GetRequiredService<IContext>();");
        sb.AppendLine();
        sb.AppendLine($"            var requestStream = ReadRequestStream<{endpoint.RequestType}>(httpContext);");
        sb.AppendLine("            var result = await endpoint.HandleAsync(requestStream, context);");
        sb.AppendLine();
        sb.AppendLine("            return result.IsSuccess ? Results.Ok(result.Value) : Results.BadRequest(result.Error);");
        sb.AppendLine("        })");
        sb.AppendLine($"        .WithName(\"{endpoint.TypeName}\")");
        sb.AppendLine("        .WithTags(\"Streaming\");");
        sb.AppendLine();
    }

    private static void GenerateBidirectionalMapping(StringBuilder sb, EndpointInfo endpoint, string template)
    {
        sb.AppendLine($"        app.MapGet({template}, async (HttpContext httpContext) =>");
        sb.AppendLine("        {");
        sb.AppendLine($"            var endpoint = httpContext.RequestServices.GetRequiredService<{endpoint.Namespace}.{endpoint.TypeName}>();");
        sb.AppendLine("            var context = httpContext.RequestServices.GetRequiredService<IContext>();");
        sb.AppendLine();
        sb.AppendLine("            await WebSocketHandler.HandleWebSocketAsync(httpContext, endpoint, context);");
        sb.AppendLine("        })");
        sb.AppendLine($"        .WithName(\"{endpoint.TypeName}\")");
        sb.AppendLine("        .WithTags(\"WebSocket\");");
        sb.AppendLine();
    }

    private static void GenerateMappingMethod(StringBuilder sb, EndpointInfo endpoint)
    {
        sb.AppendLine();
        sb.AppendLine($"    private static async Task<IResult> Handle{endpoint.TypeName}(");
        sb.AppendLine($"        [AsParameters] {endpoint.RequestType} request,");
        sb.AppendLine($"        {endpoint.Namespace}.{endpoint.TypeName} endpoint,");
        sb.AppendLine($"        IContext context,");
        sb.AppendLine($"        CancellationToken cancellationToken)");
        sb.AppendLine("    {");
        sb.AppendLine("        var result = await endpoint.HandleAsync(request, context);");
        sb.AppendLine();
        sb.AppendLine("        return result.Match(");
        sb.AppendLine("            success: value => Results.Ok(value),");
        sb.AppendLine("            failure: error => error.Type switch");
        sb.AppendLine("            {");
        sb.AppendLine("                ErrorType.NotFound => Results.NotFound(error),");
        sb.AppendLine("                ErrorType.Validation => Results.BadRequest(error),");
        sb.AppendLine("                ErrorType.Unauthorized => Results.Unauthorized(),");
        sb.AppendLine("                ErrorType.Forbidden => Results.Forbid(),");
        sb.AppendLine("                _ => Results.Problem(error.Message)");
        sb.AppendLine("            });");
        sb.AppendLine("    }");
    }

    private static void GenerateStreamingHelperMethods(StringBuilder sb)
    {
        sb.AppendLine();
        sb.AppendLine("    private static T BindRequest<T>(HttpContext httpContext)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Simplified binding - in real implementation, this would use proper model binding");
        sb.AppendLine("        return Activator.CreateInstance<T>();");
        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    private static async IAsyncEnumerable<T> ReadRequestStream<T>(HttpContext httpContext)");
        sb.AppendLine("    {");
        sb.AppendLine("        using var reader = new StreamReader(httpContext.Request.Body);");
        sb.AppendLine("        string? line;");
        sb.AppendLine();
        sb.AppendLine("        while ((line = await reader.ReadLineAsync()) != null)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (!string.IsNullOrWhiteSpace(line))");
        sb.AppendLine("            {");
        sb.AppendLine("                var item = JsonSerializer.Deserialize<T>(line);");
        sb.AppendLine("                if (item != null)");
        sb.AppendLine("                    yield return item;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
    }

    private static string ExtractTag(string routeType)
    {
        // Extract tag from route type name
        var parts = routeType.Split('.');
        return parts.Length > 1 ? parts[parts.Length - 2].ToLowerInvariant() : parts[0].ToLowerInvariant();
    }
}