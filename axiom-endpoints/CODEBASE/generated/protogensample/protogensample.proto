// Generated by Axiom Endpoints
// Version: 1.0.0
// Generated at: 2025-01-14T10:30:00.000Z

syntax = "proto3";

package protogensample;

option java_package = "com.company.protogensample";
option java_multiple_files = true;
option swift_prefix = "";
option objc_class_prefix = "AX";
option go_package = "github.com/company/protogensample";
option csharp_namespace = "ProtoGenSample.Grpc";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/type/date.proto";
import "google/type/timeofday.proto";
import "axiom_options.proto";

// Product category enumeration
enum ProductCategory {
  ELECTRONICS = 1;
  CLOTHING = 2;
  BOOKS = 3;
  SPORTS = 4;
  HOME = 5;
  OTHER = 6;
}

// Payment status enumeration
enum PaymentStatus {
  PENDING = 1;
  COMPLETED = 2;
  FAILED = 3;
  CANCELLED = 4;
  REFUNDED = 5;
}

// Product dimensions
message ProductDimensions {
  // Length in specified units
  double length = 1 [(axiom.min_value) = "0.1", (axiom.max_value) = "1000"];
  // Width in specified units
  double width = 2 [(axiom.min_value) = "0.1", (axiom.max_value) = "1000"];
  // Height in specified units
  double height = 3 [(axiom.min_value) = "0.1", (axiom.max_value) = "1000"];
  // Unit of measurement
  string unit = 4;
}

// Product specification details
message ProductSpec {
  // Weight in kilograms
  optional double weight = 1 [(axiom.min_value) = "0", (axiom.max_value) = "100"];
  // Product dimensions
  optional ProductDimensions dimensions = 2;
  // Product color
  optional string color = 3;
  // Product material
  optional string material = 4;
  // Product brand
  optional string brand = 5;
  // Product model
  optional string model = 6;
}

// Request to create a new product
message CreateProductRequest {
  // Product name
  string name = 1 [(axiom.required) = true, (axiom.min_length) = 3, (axiom.max_length) = 100];
  // Product description
  optional string description = 2 [(axiom.max_length) = 500];
  // Product price
  string price = 3 [(axiom.min_value) = "0.01", (axiom.max_value) = "999999.99"]; // Using string for decimal
  // Product category
  ProductCategory category = 4;
  // Product tags
  repeated string tags = 5;
  // Product metadata
  map<string, string> metadata = 6;
  // Product specification
  optional ProductSpec specification = 7;
}

// Response containing product information
message ProductResponse {
  // Product ID
  int32 id = 1;
  // Product name
  string name = 2;
  // Product description
  optional string description = 3;
  // Product price
  string price = 4; // Using string for decimal
  // Product category
  ProductCategory category = 5;
  // Creation timestamp
  google.protobuf.Timestamp created_at = 6;
  // Update timestamp
  optional google.protobuf.Timestamp updated_at = 7;
  // Whether product is active
  bool is_active = 8;
  // Product tags
  repeated string tags = 9;
  // Product metadata
  map<string, string> metadata = 10;
  // Product specification
  optional ProductSpec specification = 11;
}

// Request to search for products
message SearchProductsRequest {
  // Search query
  optional string query = 1;
  // Filter by category
  optional ProductCategory category = 2;
  // Minimum price filter
  optional string min_price = 3;
  // Maximum price filter
  optional string max_price = 4;
  // Filter by active status
  optional bool is_active = 5;
  // Filter by tags
  repeated string tags = 6;
  // Sort field
  optional string sort_by = 7;
  // Sort order (asc/desc)
  string sort_order = 8;
  // Page number
  int32 page = 9;
  // Page size
  int32 page_size = 10;
}

// Paginated list of products
message ProductListResponse {
  // List of products
  repeated ProductResponse products = 1;
  // Total count of products
  int32 total_count = 2;
  // Current page
  int32 page = 3;
  // Page size
  int32 page_size = 4;
  // Total pages
  int32 total_pages = 5;
  // Has next page
  bool has_next_page = 6;
  // Has previous page
  bool has_previous_page = 7;
}

// Request to get a product by ID
message GetProductRequest {
  // Product ID
  int32 id = 1;
}

// Request to update an existing product
message UpdateProductRequest {
  // Product ID
  int32 id = 1;
  // Updated name
  optional string name = 2 [(axiom.min_length) = 3, (axiom.max_length) = 100];
  // Updated description
  optional string description = 3 [(axiom.max_length) = 500];
  // Updated price
  optional string price = 4 [(axiom.min_value) = "0.01", (axiom.max_value) = "999999.99"];
  // Updated category
  optional ProductCategory category = 5;
  // Updated active status
  optional bool is_active = 6;
  // Updated tags
  repeated string tags = 7;
  // Updated metadata
  map<string, string> metadata = 8;
  // Updated specification
  optional ProductSpec specification = 9;
}

// Request to delete a product
message DeleteProductRequest {
  // Product ID
  int32 id = 1;
}

// Response for delete operations
message DeleteProductResponse {
  // Success message
  string message = 1;
  // Success status
  bool success = 2;
}

// Request for getting categories (empty)
message GetCategoriesRequest {
}

// Category information
message CategoryInfo {
  // Category ID
  int32 id = 1;
  // Category name
  string name = 2;
  // Category description
  string description = 3;
}

// Response containing product categories
message CategoriesResponse {
  // List of categories
  repeated CategoryInfo categories = 1;
}

// Address information
message Address {
  // Address line 1
  string line1 = 1;
  // Address line 2
  optional string line2 = 2;
  // City
  string city = 3;
  // State
  string state = 4;
  // Postal code
  string postal_code = 5;
  // Country
  string country = 6;
}

// Payment information for purchase events
message PaymentInfo {
  // Payment method
  string payment_method = 1;
  // Transaction ID
  string transaction_id = 2;
  // Payment amount
  string amount = 3; // Using string for decimal
  // Currency code
  string currency = 4;
  // Processing timestamp
  google.protobuf.Timestamp processed_at = 5;
  // Payment status
  PaymentStatus status = 6;
}

// Shipping information for purchase events
message ShippingInfo {
  // Shipping method
  string method = 1;
  // Shipping cost
  string cost = 2; // Using string for decimal
  // Shipping address
  Address address = 3;
  // Estimated delivery date
  optional google.protobuf.Timestamp estimated_delivery = 4;
  // Tracking number
  optional string tracking_number = 5;
}

// Event raised when a product is created
message ProductCreatedEvent {
  // Product ID
  int32 product_id = 1;
  // Event timestamp
  google.protobuf.Timestamp timestamp = 2;
  // User ID
  string user_id = 3;
  // Correlation ID
  optional string correlation_id = 4;
  // Created product
  ProductResponse product = 5;
  // Created by user
  string created_by = 6;
}

// Event raised when a product is purchased
message ProductPurchasedEvent {
  // Product ID
  int32 product_id = 1;
  // Event timestamp
  google.protobuf.Timestamp timestamp = 2;
  // User ID
  string user_id = 3;
  // Correlation ID
  optional string correlation_id = 4;
  // Order ID
  string order_id = 5;
  // Quantity purchased
  int32 quantity = 6;
  // Unit price
  string unit_price = 7; // Using string for decimal
  // Total price
  string total_price = 8; // Using string for decimal
  // Tax amount
  string tax_amount = 9; // Using string for decimal
  // Discount amount
  string discount_amount = 10; // Using string for decimal
  // Payment information
  PaymentInfo payment = 11;
  // Shipping information
  ShippingInfo shipping = 12;
}

// Product service
service ProductService {
  // Create a new product
  rpc CreateProduct(CreateProductRequest) returns (ProductResponse);
  
  // Get a product by ID
  rpc GetProduct(GetProductRequest) returns (ProductResponse);
  
  // Search for products
  rpc SearchProducts(SearchProductsRequest) returns (ProductListResponse);
  
  // Update a product
  rpc UpdateProduct(UpdateProductRequest) returns (ProductResponse);
  
  // Delete a product
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);
  
  // Get product categories
  rpc GetProductCategories(GetCategoriesRequest) returns (CategoriesResponse);
}
